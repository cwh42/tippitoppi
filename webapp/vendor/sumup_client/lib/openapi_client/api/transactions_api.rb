=begin
#SumUp REST API

#SumUpâ€™s REST API operates with [JSON](https://www.json.org/json-en.html) HTTP requests and responses. The request bodies are sent through resource-oriented URLs and use the standard [HTTP response codes](https://developer.mozilla.org/docs/Web/HTTP/Status).  You can experiment and work on your integration in a sandbox that doesn't affect your regular data and doesn't process real transactions. To create a sandbox merchant account visit the [dashboard](https://me.sumup.com/settings/developer). To use the sandbox when interacting with SumUp APIs [create an API](https://me.sumup.com/settings/api-keys) key and use it for [authentication](https://developer.sumup.com/api/authentication). 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module OpenapiClient
  class TransactionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve a transaction
    # Retrieves the full details of an identified transaction. The transaction resource is identified by a query parameter and *one* of following parameters is required:   *  `id`  *  `internal_id`  *  `transaction_code`  *  `foreign_transaction_id`  *  `client_transaction_id` 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Retrieves the transaction resource with the specified transaction ID (the &#x60;id&#x60; parameter in the transaction resource).
    # @option opts [String] :internal_id Retrieves the transaction resource with the specified internal transaction ID (the &#x60;internal_id&#x60; parameter in the transaction resource).
    # @option opts [String] :transaction_code Retrieves the transaction resource with the specified transaction code.
    # @return [TransactionFull]
    def get_transaction(opts = {})
      data, _status_code, _headers = get_transaction_with_http_info(opts)
      data
    end

    # Retrieve a transaction
    # Retrieves the full details of an identified transaction. The transaction resource is identified by a query parameter and *one* of following parameters is required:   *  &#x60;id&#x60;  *  &#x60;internal_id&#x60;  *  &#x60;transaction_code&#x60;  *  &#x60;foreign_transaction_id&#x60;  *  &#x60;client_transaction_id&#x60; 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Retrieves the transaction resource with the specified transaction ID (the &#x60;id&#x60; parameter in the transaction resource).
    # @option opts [String] :internal_id Retrieves the transaction resource with the specified internal transaction ID (the &#x60;internal_id&#x60; parameter in the transaction resource).
    # @option opts [String] :transaction_code Retrieves the transaction resource with the specified transaction code.
    # @return [Array<(TransactionFull, Integer, Hash)>] TransactionFull data, response status code and response headers
    def get_transaction_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.get_transaction ...'
      end
      # resource path
      local_var_path = '/v0.1/me/transactions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'internal_id'] = opts[:'internal_id'] if !opts[:'internal_id'].nil?
      query_params[:'transaction_code'] = opts[:'transaction_code'] if !opts[:'transaction_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionFull'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"TransactionsApi.get_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#get_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a transaction
    # Retrieves the full details of an identified transaction. The transaction resource is identified by a query parameter and *one* of following parameters is required:   *  `id`  *  `internal_id`  *  `transaction_code`  *  `foreign_transaction_id`  *  `client_transaction_id` 
    # @param merchant_code [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Retrieves the transaction resource with the specified transaction ID (the &#x60;id&#x60; parameter in the transaction resource).
    # @option opts [String] :internal_id Retrieves the transaction resource with the specified internal transaction ID (the &#x60;internal_id&#x60; parameter in the transaction resource).
    # @option opts [String] :transaction_code Retrieves the transaction resource with the specified transaction code.
    # @return [TransactionFull]
    def get_transaction_v2_1(merchant_code, opts = {})
      data, _status_code, _headers = get_transaction_v2_1_with_http_info(merchant_code, opts)
      data
    end

    # Retrieve a transaction
    # Retrieves the full details of an identified transaction. The transaction resource is identified by a query parameter and *one* of following parameters is required:   *  &#x60;id&#x60;  *  &#x60;internal_id&#x60;  *  &#x60;transaction_code&#x60;  *  &#x60;foreign_transaction_id&#x60;  *  &#x60;client_transaction_id&#x60; 
    # @param merchant_code [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Retrieves the transaction resource with the specified transaction ID (the &#x60;id&#x60; parameter in the transaction resource).
    # @option opts [String] :internal_id Retrieves the transaction resource with the specified internal transaction ID (the &#x60;internal_id&#x60; parameter in the transaction resource).
    # @option opts [String] :transaction_code Retrieves the transaction resource with the specified transaction code.
    # @return [Array<(TransactionFull, Integer, Hash)>] TransactionFull data, response status code and response headers
    def get_transaction_v2_1_with_http_info(merchant_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.get_transaction_v2_1 ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling TransactionsApi.get_transaction_v2_1"
      end
      # resource path
      local_var_path = '/v2.1/merchants/{merchant_code}/transactions'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'internal_id'] = opts[:'internal_id'] if !opts[:'internal_id'].nil?
      query_params[:'transaction_code'] = opts[:'transaction_code'] if !opts[:'transaction_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionFull'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"TransactionsApi.get_transaction_v2_1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#get_transaction_v2_1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List transactions
    # Lists detailed history of all transactions associated with the merchant profile.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transaction_code Retrieves the transaction resource with the specified transaction code.
    # @option opts [String] :order Specifies the order in which the returned results are displayed. (default to 'ascending')
    # @option opts [Integer] :limit Specifies the maximum number of results per page. Value must be a positive integer and if not specified, will return 10 results.
    # @option opts [Array<String>] :users Filters the returned results by user email.
    # @option opts [Array<String>] :statuses Filters the returned results by the specified list of final statuses of the transactions.
    # @option opts [Array<String>] :payment_types Filters the returned results by the specified list of payment types used for the transactions.
    # @option opts [Array<String>] :types Filters the returned results by the specified list of transaction types.
    # @option opts [Time] :changes_since Filters the results by the latest modification time of resources and returns only transactions that are modified *at or after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
    # @option opts [Time] :newest_time Filters the results by the creation time of resources and returns only transactions that are created *before* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
    # @option opts [String] :newest_ref Filters the results by the reference ID of transaction events and returns only transactions with events whose IDs are *smaller* than the specified value. This parameters supersedes the &#x60;newest_time&#x60; parameter (if both are provided in the request).
    # @option opts [Time] :oldest_time Filters the results by the creation time of resources and returns only transactions that are created *at or after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
    # @option opts [String] :oldest_ref Filters the results by the reference ID of transaction events and returns only transactions with events whose IDs are *greater* than the specified value. This parameters supersedes the &#x60;oldest_time&#x60; parameter (if both are provided in the request).
    # @return [ListTransactionsV21200Response]
    def list_transactions(opts = {})
      data, _status_code, _headers = list_transactions_with_http_info(opts)
      data
    end

    # List transactions
    # Lists detailed history of all transactions associated with the merchant profile.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transaction_code Retrieves the transaction resource with the specified transaction code.
    # @option opts [String] :order Specifies the order in which the returned results are displayed. (default to 'ascending')
    # @option opts [Integer] :limit Specifies the maximum number of results per page. Value must be a positive integer and if not specified, will return 10 results.
    # @option opts [Array<String>] :users Filters the returned results by user email.
    # @option opts [Array<String>] :statuses Filters the returned results by the specified list of final statuses of the transactions.
    # @option opts [Array<String>] :payment_types Filters the returned results by the specified list of payment types used for the transactions.
    # @option opts [Array<String>] :types Filters the returned results by the specified list of transaction types.
    # @option opts [Time] :changes_since Filters the results by the latest modification time of resources and returns only transactions that are modified *at or after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
    # @option opts [Time] :newest_time Filters the results by the creation time of resources and returns only transactions that are created *before* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
    # @option opts [String] :newest_ref Filters the results by the reference ID of transaction events and returns only transactions with events whose IDs are *smaller* than the specified value. This parameters supersedes the &#x60;newest_time&#x60; parameter (if both are provided in the request).
    # @option opts [Time] :oldest_time Filters the results by the creation time of resources and returns only transactions that are created *at or after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
    # @option opts [String] :oldest_ref Filters the results by the reference ID of transaction events and returns only transactions with events whose IDs are *greater* than the specified value. This parameters supersedes the &#x60;oldest_time&#x60; parameter (if both are provided in the request).
    # @return [Array<(ListTransactionsV21200Response, Integer, Hash)>] ListTransactionsV21200Response data, response status code and response headers
    def list_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.list_transactions ...'
      end
      allowable_values = ["ascending", "descending"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      allowable_values = ["SUCCESSFUL", "CANCELLED", "FAILED", "REFUNDED", "CHARGE_BACK"]
      if @api_client.config.client_side_validation && opts[:'statuses'] && !opts[:'statuses'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"statuses\", must include one of #{allowable_values}"
      end
      allowable_values = ["CASH", "POS", "ECOM", "BALANCE", "MOTO", "BOLETO", "UNKNOWN"]
      if @api_client.config.client_side_validation && opts[:'payment_types'] && !opts[:'payment_types'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"payment_types\", must include one of #{allowable_values}"
      end
      allowable_values = ["PAYMENT", "REFUND", "CHARGE_BACK"]
      if @api_client.config.client_side_validation && opts[:'types'] && !opts[:'types'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"types\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v0.1/me/transactions/history'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'transaction_code'] = opts[:'transaction_code'] if !opts[:'transaction_code'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'users'] = @api_client.build_collection_param(opts[:'users'], :multi) if !opts[:'users'].nil?
      query_params[:'statuses'] = @api_client.build_collection_param(opts[:'statuses'], :multi) if !opts[:'statuses'].nil?
      query_params[:'payment_types'] = @api_client.build_collection_param(opts[:'payment_types'], :multi) if !opts[:'payment_types'].nil?
      query_params[:'types'] = @api_client.build_collection_param(opts[:'types'], :multi) if !opts[:'types'].nil?
      query_params[:'changes_since'] = opts[:'changes_since'] if !opts[:'changes_since'].nil?
      query_params[:'newest_time'] = opts[:'newest_time'] if !opts[:'newest_time'].nil?
      query_params[:'newest_ref'] = opts[:'newest_ref'] if !opts[:'newest_ref'].nil?
      query_params[:'oldest_time'] = opts[:'oldest_time'] if !opts[:'oldest_time'].nil?
      query_params[:'oldest_ref'] = opts[:'oldest_ref'] if !opts[:'oldest_ref'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListTransactionsV21200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"TransactionsApi.list_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#list_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List transactions
    # Lists detailed history of all transactions associated with the merchant profile.
    # @param merchant_code [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transaction_code Retrieves the transaction resource with the specified transaction code.
    # @option opts [String] :order Specifies the order in which the returned results are displayed. (default to 'ascending')
    # @option opts [Integer] :limit Specifies the maximum number of results per page. Value must be a positive integer and if not specified, will return 10 results.
    # @option opts [Array<String>] :users Filters the returned results by user email.
    # @option opts [Array<String>] :statuses Filters the returned results by the specified list of final statuses of the transactions.
    # @option opts [Array<String>] :payment_types Filters the returned results by the specified list of payment types used for the transactions.
    # @option opts [Array<String>] :types Filters the returned results by the specified list of transaction types.
    # @option opts [Time] :changes_since Filters the results by the latest modification time of resources and returns only transactions that are modified *at or after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
    # @option opts [Time] :newest_time Filters the results by the creation time of resources and returns only transactions that are created *before* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
    # @option opts [String] :newest_ref Filters the results by the reference ID of transaction events and returns only transactions with events whose IDs are *smaller* than the specified value. This parameters supersedes the &#x60;newest_time&#x60; parameter (if both are provided in the request).
    # @option opts [Time] :oldest_time Filters the results by the creation time of resources and returns only transactions that are created *at or after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
    # @option opts [String] :oldest_ref Filters the results by the reference ID of transaction events and returns only transactions with events whose IDs are *greater* than the specified value. This parameters supersedes the &#x60;oldest_time&#x60; parameter (if both are provided in the request).
    # @return [ListTransactionsV21200Response]
    def list_transactions_v2_1(merchant_code, opts = {})
      data, _status_code, _headers = list_transactions_v2_1_with_http_info(merchant_code, opts)
      data
    end

    # List transactions
    # Lists detailed history of all transactions associated with the merchant profile.
    # @param merchant_code [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transaction_code Retrieves the transaction resource with the specified transaction code.
    # @option opts [String] :order Specifies the order in which the returned results are displayed. (default to 'ascending')
    # @option opts [Integer] :limit Specifies the maximum number of results per page. Value must be a positive integer and if not specified, will return 10 results.
    # @option opts [Array<String>] :users Filters the returned results by user email.
    # @option opts [Array<String>] :statuses Filters the returned results by the specified list of final statuses of the transactions.
    # @option opts [Array<String>] :payment_types Filters the returned results by the specified list of payment types used for the transactions.
    # @option opts [Array<String>] :types Filters the returned results by the specified list of transaction types.
    # @option opts [Time] :changes_since Filters the results by the latest modification time of resources and returns only transactions that are modified *at or after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
    # @option opts [Time] :newest_time Filters the results by the creation time of resources and returns only transactions that are created *before* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
    # @option opts [String] :newest_ref Filters the results by the reference ID of transaction events and returns only transactions with events whose IDs are *smaller* than the specified value. This parameters supersedes the &#x60;newest_time&#x60; parameter (if both are provided in the request).
    # @option opts [Time] :oldest_time Filters the results by the creation time of resources and returns only transactions that are created *at or after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
    # @option opts [String] :oldest_ref Filters the results by the reference ID of transaction events and returns only transactions with events whose IDs are *greater* than the specified value. This parameters supersedes the &#x60;oldest_time&#x60; parameter (if both are provided in the request).
    # @return [Array<(ListTransactionsV21200Response, Integer, Hash)>] ListTransactionsV21200Response data, response status code and response headers
    def list_transactions_v2_1_with_http_info(merchant_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.list_transactions_v2_1 ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling TransactionsApi.list_transactions_v2_1"
      end
      allowable_values = ["ascending", "descending"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      allowable_values = ["SUCCESSFUL", "CANCELLED", "FAILED", "REFUNDED", "CHARGE_BACK"]
      if @api_client.config.client_side_validation && opts[:'statuses'] && !opts[:'statuses'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"statuses\", must include one of #{allowable_values}"
      end
      allowable_values = ["CASH", "POS", "ECOM", "BALANCE", "MOTO", "BOLETO", "UNKNOWN"]
      if @api_client.config.client_side_validation && opts[:'payment_types'] && !opts[:'payment_types'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"payment_types\", must include one of #{allowable_values}"
      end
      allowable_values = ["PAYMENT", "REFUND", "CHARGE_BACK"]
      if @api_client.config.client_side_validation && opts[:'types'] && !opts[:'types'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"types\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v2.1/merchants/{merchant_code}/transactions/history'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'transaction_code'] = opts[:'transaction_code'] if !opts[:'transaction_code'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'users'] = @api_client.build_collection_param(opts[:'users'], :multi) if !opts[:'users'].nil?
      query_params[:'statuses'] = @api_client.build_collection_param(opts[:'statuses'], :multi) if !opts[:'statuses'].nil?
      query_params[:'payment_types'] = @api_client.build_collection_param(opts[:'payment_types'], :multi) if !opts[:'payment_types'].nil?
      query_params[:'types'] = @api_client.build_collection_param(opts[:'types'], :multi) if !opts[:'types'].nil?
      query_params[:'changes_since'] = opts[:'changes_since'] if !opts[:'changes_since'].nil?
      query_params[:'newest_time'] = opts[:'newest_time'] if !opts[:'newest_time'].nil?
      query_params[:'newest_ref'] = opts[:'newest_ref'] if !opts[:'newest_ref'].nil?
      query_params[:'oldest_time'] = opts[:'oldest_time'] if !opts[:'oldest_time'].nil?
      query_params[:'oldest_ref'] = opts[:'oldest_ref'] if !opts[:'oldest_ref'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListTransactionsV21200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"TransactionsApi.list_transactions_v2_1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#list_transactions_v2_1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refund a transaction
    # Refunds an identified transaction either in full or partially.
    # @param txn_id [String] Unique ID of the transaction.
    # @param [Hash] opts the optional parameters
    # @option opts [RefundTransactionRequest] :refund_transaction_request 
    # @return [Object]
    def refund_transaction(txn_id, opts = {})
      data, _status_code, _headers = refund_transaction_with_http_info(txn_id, opts)
      data
    end

    # Refund a transaction
    # Refunds an identified transaction either in full or partially.
    # @param txn_id [String] Unique ID of the transaction.
    # @param [Hash] opts the optional parameters
    # @option opts [RefundTransactionRequest] :refund_transaction_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def refund_transaction_with_http_info(txn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.refund_transaction ...'
      end
      # verify the required parameter 'txn_id' is set
      if @api_client.config.client_side_validation && txn_id.nil?
        fail ArgumentError, "Missing the required parameter 'txn_id' when calling TransactionsApi.refund_transaction"
      end
      # resource path
      local_var_path = '/v0.1/me/refund/{txn_id}'.sub('{' + 'txn_id' + '}', CGI.escape(txn_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'refund_transaction_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"TransactionsApi.refund_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#refund_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
