=begin
#SumUp REST API

#SumUpâ€™s REST API operates with [JSON](https://www.json.org/json-en.html) HTTP requests and responses. The request bodies are sent through resource-oriented URLs and use the standard [HTTP response codes](https://developer.mozilla.org/docs/Web/HTTP/Status).  You can experiment and work on your integration in a sandbox that doesn't affect your regular data and doesn't process real transactions. To create a sandbox merchant account visit the [dashboard](https://me.sumup.com/settings/developer). To use the sandbox when interacting with SumUp APIs [create an API](https://me.sumup.com/settings/api-keys) key and use it for [authentication](https://developer.sumup.com/api/authentication). 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module OpenapiClient
  class RolesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a role
    # Create a custom role for the merchant. Roles are defined by the set of permissions that they grant to the members that they are assigned to.
    # @param merchant_code [String] Merchant code.
    # @param create_merchant_role_request [CreateMerchantRoleRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Role]
    def create_merchant_role(merchant_code, create_merchant_role_request, opts = {})
      data, _status_code, _headers = create_merchant_role_with_http_info(merchant_code, create_merchant_role_request, opts)
      data
    end

    # Create a role
    # Create a custom role for the merchant. Roles are defined by the set of permissions that they grant to the members that they are assigned to.
    # @param merchant_code [String] Merchant code.
    # @param create_merchant_role_request [CreateMerchantRoleRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Role, Integer, Hash)>] Role data, response status code and response headers
    def create_merchant_role_with_http_info(merchant_code, create_merchant_role_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.create_merchant_role ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling RolesApi.create_merchant_role"
      end
      # verify the required parameter 'create_merchant_role_request' is set
      if @api_client.config.client_side_validation && create_merchant_role_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_merchant_role_request' when calling RolesApi.create_merchant_role"
      end
      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/roles'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_merchant_role_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Role'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.create_merchant_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#create_merchant_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a role
    # Delete a custom role.
    # @param merchant_code [String] Merchant code.
    # @param role_id [String] The ID of the role to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_merchant_role(merchant_code, role_id, opts = {})
      delete_merchant_role_with_http_info(merchant_code, role_id, opts)
      nil
    end

    # Delete a role
    # Delete a custom role.
    # @param merchant_code [String] Merchant code.
    # @param role_id [String] The ID of the role to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_merchant_role_with_http_info(merchant_code, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.delete_merchant_role ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling RolesApi.delete_merchant_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling RolesApi.delete_merchant_role"
      end
      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/roles/{role_id}'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s)).sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.delete_merchant_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#delete_merchant_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a role
    # Retrieve a custom role by ID.
    # @param merchant_code [String] Merchant code.
    # @param role_id [String] The ID of the role to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Role]
    def get_merchant_role(merchant_code, role_id, opts = {})
      data, _status_code, _headers = get_merchant_role_with_http_info(merchant_code, role_id, opts)
      data
    end

    # Retrieve a role
    # Retrieve a custom role by ID.
    # @param merchant_code [String] Merchant code.
    # @param role_id [String] The ID of the role to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Role, Integer, Hash)>] Role data, response status code and response headers
    def get_merchant_role_with_http_info(merchant_code, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.get_merchant_role ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling RolesApi.get_merchant_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling RolesApi.get_merchant_role"
      end
      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/roles/{role_id}'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s)).sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Role'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.get_merchant_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_merchant_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List roles
    # List merchant's custom roles.
    # @param merchant_code [String] Merchant code.
    # @param [Hash] opts the optional parameters
    # @return [ListMerchantRoles200Response]
    def list_merchant_roles(merchant_code, opts = {})
      data, _status_code, _headers = list_merchant_roles_with_http_info(merchant_code, opts)
      data
    end

    # List roles
    # List merchant&#39;s custom roles.
    # @param merchant_code [String] Merchant code.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListMerchantRoles200Response, Integer, Hash)>] ListMerchantRoles200Response data, response status code and response headers
    def list_merchant_roles_with_http_info(merchant_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.list_merchant_roles ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling RolesApi.list_merchant_roles"
      end
      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/roles'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListMerchantRoles200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.list_merchant_roles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#list_merchant_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a role
    # Update a custom role.
    # @param merchant_code [String] Merchant code.
    # @param role_id [String] The ID of the role to retrieve.
    # @param update_merchant_role_request [UpdateMerchantRoleRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Role]
    def update_merchant_role(merchant_code, role_id, update_merchant_role_request, opts = {})
      data, _status_code, _headers = update_merchant_role_with_http_info(merchant_code, role_id, update_merchant_role_request, opts)
      data
    end

    # Update a role
    # Update a custom role.
    # @param merchant_code [String] Merchant code.
    # @param role_id [String] The ID of the role to retrieve.
    # @param update_merchant_role_request [UpdateMerchantRoleRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Role, Integer, Hash)>] Role data, response status code and response headers
    def update_merchant_role_with_http_info(merchant_code, role_id, update_merchant_role_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.update_merchant_role ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling RolesApi.update_merchant_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling RolesApi.update_merchant_role"
      end
      # verify the required parameter 'update_merchant_role_request' is set
      if @api_client.config.client_side_validation && update_merchant_role_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_merchant_role_request' when calling RolesApi.update_merchant_role"
      end
      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/roles/{role_id}'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s)).sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_merchant_role_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Role'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.update_merchant_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#update_merchant_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
