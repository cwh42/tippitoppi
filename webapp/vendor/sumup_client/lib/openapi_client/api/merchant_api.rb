=begin
#SumUp REST API

#SumUpâ€™s REST API operates with [JSON](https://www.json.org/json-en.html) HTTP requests and responses. The request bodies are sent through resource-oriented URLs and use the standard [HTTP response codes](https://developer.mozilla.org/docs/Web/HTTP/Status).  You can experiment and work on your integration in a sandbox that doesn't affect your regular data and doesn't process real transactions. To create a sandbox merchant account visit the [dashboard](https://me.sumup.com/settings/developer). To use the sandbox when interacting with SumUp APIs [create an API](https://me.sumup.com/settings/api-keys) key and use it for [authentication](https://developer.sumup.com/api/authentication). 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module OpenapiClient
  class MerchantApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve a profile
    # Returns user profile information.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include A list of additional information you want to receive for the user. By default only personal and merchant profile information will be returned.
    # @return [MerchantAccount]
    def get_account(opts = {})
      data, _status_code, _headers = get_account_with_http_info(opts)
      data
    end

    # Retrieve a profile
    # Returns user profile information.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include A list of additional information you want to receive for the user. By default only personal and merchant profile information will be returned.
    # @return [Array<(MerchantAccount, Integer, Hash)>] MerchantAccount data, response status code and response headers
    def get_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MerchantApi.get_account ...'
      end
      allowable_values = ["settings", "doing_business_as", "bank_accounts", "app_settings", "country_details"]
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"include\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v0.1/me'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include[]'] = @api_client.build_collection_param(opts[:'include'], :multi) if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MerchantAccount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"MerchantApi.get_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MerchantApi#get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve DBA
    # Retrieves Doing Business As profile.
    # @param [Hash] opts the optional parameters
    # @return [DoingBusinessAs]
    def get_doing_business_as(opts = {})
      data, _status_code, _headers = get_doing_business_as_with_http_info(opts)
      data
    end

    # Retrieve DBA
    # Retrieves Doing Business As profile.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DoingBusinessAs, Integer, Hash)>] DoingBusinessAs data, response status code and response headers
    def get_doing_business_as_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MerchantApi.get_doing_business_as ...'
      end
      # resource path
      local_var_path = '/v0.1/me/merchant-profile/doing-business-as'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DoingBusinessAs'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"MerchantApi.get_doing_business_as",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MerchantApi#get_doing_business_as\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a merchant profile
    # Retrieves merchant profile data.
    # @param [Hash] opts the optional parameters
    # @return [MerchantProfile]
    def get_merchant_profile(opts = {})
      data, _status_code, _headers = get_merchant_profile_with_http_info(opts)
      data
    end

    # Retrieve a merchant profile
    # Retrieves merchant profile data.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MerchantProfile, Integer, Hash)>] MerchantProfile data, response status code and response headers
    def get_merchant_profile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MerchantApi.get_merchant_profile ...'
      end
      # resource path
      local_var_path = '/v0.1/me/merchant-profile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MerchantProfile'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"MerchantApi.get_merchant_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MerchantApi#get_merchant_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a personal profile
    # Retrieves personal profile data.
    # @param [Hash] opts the optional parameters
    # @return [PersonalProfile]
    def get_personal_profile(opts = {})
      data, _status_code, _headers = get_personal_profile_with_http_info(opts)
      data
    end

    # Retrieve a personal profile
    # Retrieves personal profile data.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalProfile, Integer, Hash)>] PersonalProfile data, response status code and response headers
    def get_personal_profile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MerchantApi.get_personal_profile ...'
      end
      # resource path
      local_var_path = '/v0.1/me/personal-profile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalProfile'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"MerchantApi.get_personal_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MerchantApi#get_personal_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get settings
    # Retrieves merchant settings.
    # @param [Hash] opts the optional parameters
    # @return [MerchantSettings]
    def get_settings(opts = {})
      data, _status_code, _headers = get_settings_with_http_info(opts)
      data
    end

    # Get settings
    # Retrieves merchant settings.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MerchantSettings, Integer, Hash)>] MerchantSettings data, response status code and response headers
    def get_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MerchantApi.get_settings ...'
      end
      # resource path
      local_var_path = '/v0.1/me/merchant-profile/settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MerchantSettings'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"MerchantApi.get_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MerchantApi#get_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List bank accounts
    # Retrieves bank accounts of the merchant.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :primary If true only the primary bank account (the one used for payouts) will be returned.
    # @return [Array<BankAccount>]
    def list_bank_accounts(opts = {})
      data, _status_code, _headers = list_bank_accounts_with_http_info(opts)
      data
    end

    # List bank accounts
    # Retrieves bank accounts of the merchant.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :primary If true only the primary bank account (the one used for payouts) will be returned.
    # @return [Array<(Array<BankAccount>, Integer, Hash)>] Array<BankAccount> data, response status code and response headers
    def list_bank_accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MerchantApi.list_bank_accounts ...'
      end
      # resource path
      local_var_path = '/v0.1/me/merchant-profile/bank-accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'primary'] = opts[:'primary'] if !opts[:'primary'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BankAccount>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"MerchantApi.list_bank_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MerchantApi#list_bank_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List bank accounts
    # Retrieves bank accounts of the merchant.
    # @param merchant_code [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :primary If true only the primary bank account (the one used for payouts) will be returned.
    # @return [Array<BankAccount>]
    def list_bank_accounts_v11(merchant_code, opts = {})
      data, _status_code, _headers = list_bank_accounts_v11_with_http_info(merchant_code, opts)
      data
    end

    # List bank accounts
    # Retrieves bank accounts of the merchant.
    # @param merchant_code [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :primary If true only the primary bank account (the one used for payouts) will be returned.
    # @return [Array<(Array<BankAccount>, Integer, Hash)>] Array<BankAccount> data, response status code and response headers
    def list_bank_accounts_v11_with_http_info(merchant_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MerchantApi.list_bank_accounts_v11 ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling MerchantApi.list_bank_accounts_v11"
      end
      # resource path
      local_var_path = '/v1.1/merchants/{merchant_code}/bank-accounts'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'primary'] = opts[:'primary'] if !opts[:'primary'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BankAccount>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"MerchantApi.list_bank_accounts_v11",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MerchantApi#list_bank_accounts_v11\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
