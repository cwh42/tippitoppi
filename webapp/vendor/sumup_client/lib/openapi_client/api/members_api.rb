=begin
#SumUp REST API

#SumUpâ€™s REST API operates with [JSON](https://www.json.org/json-en.html) HTTP requests and responses. The request bodies are sent through resource-oriented URLs and use the standard [HTTP response codes](https://developer.mozilla.org/docs/Web/HTTP/Status).  You can experiment and work on your integration in a sandbox that doesn't affect your regular data and doesn't process real transactions. To create a sandbox merchant account visit the [dashboard](https://me.sumup.com/settings/developer). To use the sandbox when interacting with SumUp APIs [create an API](https://me.sumup.com/settings/api-keys) key and use it for [authentication](https://developer.sumup.com/api/authentication). 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module OpenapiClient
  class MembersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a member
    # Create a merchant member.
    # @param merchant_code [String] Merchant code.
    # @param create_merchant_member_request [CreateMerchantMemberRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Member]
    def create_merchant_member(merchant_code, create_merchant_member_request, opts = {})
      data, _status_code, _headers = create_merchant_member_with_http_info(merchant_code, create_merchant_member_request, opts)
      data
    end

    # Create a member
    # Create a merchant member.
    # @param merchant_code [String] Merchant code.
    # @param create_merchant_member_request [CreateMerchantMemberRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Member, Integer, Hash)>] Member data, response status code and response headers
    def create_merchant_member_with_http_info(merchant_code, create_merchant_member_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.create_merchant_member ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling MembersApi.create_merchant_member"
      end
      # verify the required parameter 'create_merchant_member_request' is set
      if @api_client.config.client_side_validation && create_merchant_member_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_merchant_member_request' when calling MembersApi.create_merchant_member"
      end
      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/members'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_merchant_member_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Member'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"MembersApi.create_merchant_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#create_merchant_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a member
    # Deletes a merchant member.
    # @param merchant_code [String] Merchant code.
    # @param member_id [String] The ID of the member to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_merchant_member(merchant_code, member_id, opts = {})
      delete_merchant_member_with_http_info(merchant_code, member_id, opts)
      nil
    end

    # Delete a member
    # Deletes a merchant member.
    # @param merchant_code [String] Merchant code.
    # @param member_id [String] The ID of the member to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_merchant_member_with_http_info(merchant_code, member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.delete_merchant_member ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling MembersApi.delete_merchant_member"
      end
      # verify the required parameter 'member_id' is set
      if @api_client.config.client_side_validation && member_id.nil?
        fail ArgumentError, "Missing the required parameter 'member_id' when calling MembersApi.delete_merchant_member"
      end
      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/members/{member_id}'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s)).sub('{' + 'member_id' + '}', CGI.escape(member_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"MembersApi.delete_merchant_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#delete_merchant_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a member
    # Retrieve a merchant member.
    # @param merchant_code [String] Merchant code.
    # @param member_id [String] The ID of the member to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Member]
    def get_merchant_member(merchant_code, member_id, opts = {})
      data, _status_code, _headers = get_merchant_member_with_http_info(merchant_code, member_id, opts)
      data
    end

    # Retrieve a member
    # Retrieve a merchant member.
    # @param merchant_code [String] Merchant code.
    # @param member_id [String] The ID of the member to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Member, Integer, Hash)>] Member data, response status code and response headers
    def get_merchant_member_with_http_info(merchant_code, member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.get_merchant_member ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling MembersApi.get_merchant_member"
      end
      # verify the required parameter 'member_id' is set
      if @api_client.config.client_side_validation && member_id.nil?
        fail ArgumentError, "Missing the required parameter 'member_id' when calling MembersApi.get_merchant_member"
      end
      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/members/{member_id}'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s)).sub('{' + 'member_id' + '}', CGI.escape(member_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Member'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"MembersApi.get_merchant_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#get_merchant_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List members
    # Lists merchant members.
    # @param merchant_code [String] Merchant code.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset of the first member to return. (default to 0)
    # @option opts [Integer] :limit Maximum number of members to return. (default to 10)
    # @option opts [Boolean] :scroll Indicates to skip count query. (default to false)
    # @option opts [String] :email Filter the returned members by email address prefix.
    # @option opts [MembershipStatus] :status Filter the returned members by the membership status.
    # @option opts [Array<String>] :roles Filter the returned members by role.
    # @return [ListMerchantMembers200Response]
    def list_merchant_members(merchant_code, opts = {})
      data, _status_code, _headers = list_merchant_members_with_http_info(merchant_code, opts)
      data
    end

    # List members
    # Lists merchant members.
    # @param merchant_code [String] Merchant code.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset of the first member to return. (default to 0)
    # @option opts [Integer] :limit Maximum number of members to return. (default to 10)
    # @option opts [Boolean] :scroll Indicates to skip count query. (default to false)
    # @option opts [String] :email Filter the returned members by email address prefix.
    # @option opts [MembershipStatus] :status Filter the returned members by the membership status.
    # @option opts [Array<String>] :roles Filter the returned members by role.
    # @return [Array<(ListMerchantMembers200Response, Integer, Hash)>] ListMerchantMembers200Response data, response status code and response headers
    def list_merchant_members_with_http_info(merchant_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.list_merchant_members ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling MembersApi.list_merchant_members"
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling MembersApi.list_merchant_members, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 25
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling MembersApi.list_merchant_members, must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling MembersApi.list_merchant_members, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/members'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'scroll'] = opts[:'scroll'] if !opts[:'scroll'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'roles'] = @api_client.build_collection_param(opts[:'roles'], :multi) if !opts[:'roles'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListMerchantMembers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"MembersApi.list_merchant_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#list_merchant_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a member
    # Update the merchant member.
    # @param merchant_code [String] Merchant code.
    # @param member_id [String] The ID of the member to retrieve.
    # @param update_merchant_member_request [UpdateMerchantMemberRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Member]
    def update_merchant_member(merchant_code, member_id, update_merchant_member_request, opts = {})
      data, _status_code, _headers = update_merchant_member_with_http_info(merchant_code, member_id, update_merchant_member_request, opts)
      data
    end

    # Update a member
    # Update the merchant member.
    # @param merchant_code [String] Merchant code.
    # @param member_id [String] The ID of the member to retrieve.
    # @param update_merchant_member_request [UpdateMerchantMemberRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Member, Integer, Hash)>] Member data, response status code and response headers
    def update_merchant_member_with_http_info(merchant_code, member_id, update_merchant_member_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.update_merchant_member ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling MembersApi.update_merchant_member"
      end
      # verify the required parameter 'member_id' is set
      if @api_client.config.client_side_validation && member_id.nil?
        fail ArgumentError, "Missing the required parameter 'member_id' when calling MembersApi.update_merchant_member"
      end
      # verify the required parameter 'update_merchant_member_request' is set
      if @api_client.config.client_side_validation && update_merchant_member_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_merchant_member_request' when calling MembersApi.update_merchant_member"
      end
      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/members/{member_id}'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s)).sub('{' + 'member_id' + '}', CGI.escape(member_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_merchant_member_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Member'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"MembersApi.update_merchant_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#update_merchant_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
