=begin
#SumUp REST API

#SumUpâ€™s REST API operates with [JSON](https://www.json.org/json-en.html) HTTP requests and responses. The request bodies are sent through resource-oriented URLs and use the standard [HTTP response codes](https://developer.mozilla.org/docs/Web/HTTP/Status).  You can experiment and work on your integration in a sandbox that doesn't affect your regular data and doesn't process real transactions. To create a sandbox merchant account visit the [dashboard](https://me.sumup.com/settings/developer). To use the sandbox when interacting with SumUp APIs [create an API](https://me.sumup.com/settings/api-keys) key and use it for [authentication](https://developer.sumup.com/api/authentication). 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module OpenapiClient
  class SubaccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve an operator
    # Returns specific operator.
    # @param operator_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Operator]
    def compat_get_operator(operator_id, opts = {})
      data, _status_code, _headers = compat_get_operator_with_http_info(operator_id, opts)
      data
    end

    # Retrieve an operator
    # Returns specific operator.
    # @param operator_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Operator, Integer, Hash)>] Operator data, response status code and response headers
    def compat_get_operator_with_http_info(operator_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubaccountsApi.compat_get_operator ...'
      end
      # verify the required parameter 'operator_id' is set
      if @api_client.config.client_side_validation && operator_id.nil?
        fail ArgumentError, "Missing the required parameter 'operator_id' when calling SubaccountsApi.compat_get_operator"
      end
      # resource path
      local_var_path = '/v0.1/me/accounts/{operator_id}'.sub('{' + 'operator_id' + '}', CGI.escape(operator_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Operator'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"SubaccountsApi.compat_get_operator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubaccountsApi#compat_get_operator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an operator
    # Creates new operator for currently authorized users' merchant.
    # @param create_sub_account_request [CreateSubAccountRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Operator]
    def create_sub_account(create_sub_account_request, opts = {})
      data, _status_code, _headers = create_sub_account_with_http_info(create_sub_account_request, opts)
      data
    end

    # Create an operator
    # Creates new operator for currently authorized users&#39; merchant.
    # @param create_sub_account_request [CreateSubAccountRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Operator, Integer, Hash)>] Operator data, response status code and response headers
    def create_sub_account_with_http_info(create_sub_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubaccountsApi.create_sub_account ...'
      end
      # verify the required parameter 'create_sub_account_request' is set
      if @api_client.config.client_side_validation && create_sub_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_sub_account_request' when calling SubaccountsApi.create_sub_account"
      end
      # resource path
      local_var_path = '/v0.1/me/accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_sub_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Operator'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"SubaccountsApi.create_sub_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubaccountsApi#create_sub_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable an operator
    # @param operator_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Operator]
    def deactivate_sub_account(operator_id, opts = {})
      data, _status_code, _headers = deactivate_sub_account_with_http_info(operator_id, opts)
      data
    end

    # Disable an operator
    # @param operator_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Operator, Integer, Hash)>] Operator data, response status code and response headers
    def deactivate_sub_account_with_http_info(operator_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubaccountsApi.deactivate_sub_account ...'
      end
      # verify the required parameter 'operator_id' is set
      if @api_client.config.client_side_validation && operator_id.nil?
        fail ArgumentError, "Missing the required parameter 'operator_id' when calling SubaccountsApi.deactivate_sub_account"
      end
      # resource path
      local_var_path = '/v0.1/me/accounts/{operator_id}'.sub('{' + 'operator_id' + '}', CGI.escape(operator_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Operator'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"SubaccountsApi.deactivate_sub_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubaccountsApi#deactivate_sub_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List operators
    # Returns list of operators for currently authorized user's merchant.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query Search query used to filter users that match given query term.  Current implementation allow querying only over the email address. All operators whos email address contains the query string are returned. 
    # @option opts [Boolean] :include_primary If true the list of operators will include also the primary user.
    # @return [Array<Operator>]
    def list_sub_accounts(opts = {})
      data, _status_code, _headers = list_sub_accounts_with_http_info(opts)
      data
    end

    # List operators
    # Returns list of operators for currently authorized user&#39;s merchant.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query Search query used to filter users that match given query term.  Current implementation allow querying only over the email address. All operators whos email address contains the query string are returned. 
    # @option opts [Boolean] :include_primary If true the list of operators will include also the primary user.
    # @return [Array<(Array<Operator>, Integer, Hash)>] Array<Operator> data, response status code and response headers
    def list_sub_accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubaccountsApi.list_sub_accounts ...'
      end
      # resource path
      local_var_path = '/v0.1/me/accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'include_primary'] = opts[:'include_primary'] if !opts[:'include_primary'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Operator>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"SubaccountsApi.list_sub_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubaccountsApi#list_sub_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an operator
    # Updates operator. If the operator was disabled and their password is updated they will be unblocked.
    # @param operator_id [Integer] 
    # @param update_sub_account_request [UpdateSubAccountRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Operator]
    def update_sub_account(operator_id, update_sub_account_request, opts = {})
      data, _status_code, _headers = update_sub_account_with_http_info(operator_id, update_sub_account_request, opts)
      data
    end

    # Update an operator
    # Updates operator. If the operator was disabled and their password is updated they will be unblocked.
    # @param operator_id [Integer] 
    # @param update_sub_account_request [UpdateSubAccountRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Operator, Integer, Hash)>] Operator data, response status code and response headers
    def update_sub_account_with_http_info(operator_id, update_sub_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubaccountsApi.update_sub_account ...'
      end
      # verify the required parameter 'operator_id' is set
      if @api_client.config.client_side_validation && operator_id.nil?
        fail ArgumentError, "Missing the required parameter 'operator_id' when calling SubaccountsApi.update_sub_account"
      end
      # verify the required parameter 'update_sub_account_request' is set
      if @api_client.config.client_side_validation && update_sub_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_sub_account_request' when calling SubaccountsApi.update_sub_account"
      end
      # resource path
      local_var_path = '/v0.1/me/accounts/{operator_id}'.sub('{' + 'operator_id' + '}', CGI.escape(operator_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_sub_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Operator'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"SubaccountsApi.update_sub_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubaccountsApi#update_sub_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
