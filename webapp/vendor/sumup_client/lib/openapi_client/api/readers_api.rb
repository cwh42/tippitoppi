=begin
#SumUp REST API

#SumUpâ€™s REST API operates with [JSON](https://www.json.org/json-en.html) HTTP requests and responses. The request bodies are sent through resource-oriented URLs and use the standard [HTTP response codes](https://developer.mozilla.org/docs/Web/HTTP/Status).  You can experiment and work on your integration in a sandbox that doesn't affect your regular data and doesn't process real transactions. To create a sandbox merchant account visit the [dashboard](https://me.sumup.com/settings/developer). To use the sandbox when interacting with SumUp APIs [create an API](https://me.sumup.com/settings/api-keys) key and use it for [authentication](https://developer.sumup.com/api/authentication). 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module OpenapiClient
  class ReadersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Reader
    # Create a new Reader for the merchant account.
    # @param merchant_code [String] Unique identifier of the merchant account.
    # @param create_reader_request [CreateReaderRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Reader]
    def create_reader(merchant_code, create_reader_request, opts = {})
      data, _status_code, _headers = create_reader_with_http_info(merchant_code, create_reader_request, opts)
      data
    end

    # Create a Reader
    # Create a new Reader for the merchant account.
    # @param merchant_code [String] Unique identifier of the merchant account.
    # @param create_reader_request [CreateReaderRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reader, Integer, Hash)>] Reader data, response status code and response headers
    def create_reader_with_http_info(merchant_code, create_reader_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReadersApi.create_reader ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling ReadersApi.create_reader"
      end
      # verify the required parameter 'create_reader_request' is set
      if @api_client.config.client_side_validation && create_reader_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_reader_request' when calling ReadersApi.create_reader"
      end
      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/readers'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_reader_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Reader'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"ReadersApi.create_reader",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReadersApi#create_reader\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Reader Checkout
    # Create a Checkout for a Reader.  This process is asynchronous and the actual transaction may take some time to be stared on the device.   There are some caveats when using this endpoint: * The target device must be online, otherwise checkout won't be accepted * After the checkout is accepted, the system has 60 seconds to start the payment on the target device. During this time, any other checkout for the same device will be rejected.  **Note**: If the target device is a Solo, it must be in version 3.3.24.3 or higher. 
    # @param merchant_code [String] 
    # @param id [String] The unique identifier of the reader. 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateReaderCheckout] :create_reader_checkout 
    # @return [CreateReaderCheckout201Response]
    def create_reader_checkout(merchant_code, id, opts = {})
      data, _status_code, _headers = create_reader_checkout_with_http_info(merchant_code, id, opts)
      data
    end

    # Create a Reader Checkout
    # Create a Checkout for a Reader.  This process is asynchronous and the actual transaction may take some time to be stared on the device.   There are some caveats when using this endpoint: * The target device must be online, otherwise checkout won&#39;t be accepted * After the checkout is accepted, the system has 60 seconds to start the payment on the target device. During this time, any other checkout for the same device will be rejected.  **Note**: If the target device is a Solo, it must be in version 3.3.24.3 or higher. 
    # @param merchant_code [String] 
    # @param id [String] The unique identifier of the reader. 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateReaderCheckout] :create_reader_checkout 
    # @return [Array<(CreateReaderCheckout201Response, Integer, Hash)>] CreateReaderCheckout201Response data, response status code and response headers
    def create_reader_checkout_with_http_info(merchant_code, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReadersApi.create_reader_checkout ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling ReadersApi.create_reader_checkout"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReadersApi.create_reader_checkout"
      end
      if @api_client.config.client_side_validation && id.to_s.length > 30
        fail ArgumentError, 'invalid value for "id" when calling ReadersApi.create_reader_checkout, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && id.to_s.length < 30
        fail ArgumentError, 'invalid value for "id" when calling ReadersApi.create_reader_checkout, the character length must be great than or equal to 30.'
      end

      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/readers/{id}/checkout'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_reader_checkout'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateReaderCheckout201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"ReadersApi.create_reader_checkout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReadersApi#create_reader_checkout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Reader Terminate action
    # Create a Terminate action for a Reader.  It stops the current transaction on the target device.  This process is asynchronous and the actual termination may take some time to be performed on the device.   There are some caveats when using this endpoint: * The target device must be online, otherwise terminate won't be accepted * The action will succeed only if the device is waiting for cardholder action: e.g: waiting for card, waiting for PIN, etc. * There is no confirmation of the termination.  If a transaction is successfully terminated and `return_url` was provided on Checkout, the transaction status will be sent as `failed` to the provided URL.  **Note**: If the target device is a Solo, it must be in version 3.3.28.0 or higher. 
    # @param merchant_code [String] 
    # @param id [String] The unique identifier of the reader. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_reader_terminate(merchant_code, id, opts = {})
      create_reader_terminate_with_http_info(merchant_code, id, opts)
      nil
    end

    # Create a Reader Terminate action
    # Create a Terminate action for a Reader.  It stops the current transaction on the target device.  This process is asynchronous and the actual termination may take some time to be performed on the device.   There are some caveats when using this endpoint: * The target device must be online, otherwise terminate won&#39;t be accepted * The action will succeed only if the device is waiting for cardholder action: e.g: waiting for card, waiting for PIN, etc. * There is no confirmation of the termination.  If a transaction is successfully terminated and &#x60;return_url&#x60; was provided on Checkout, the transaction status will be sent as &#x60;failed&#x60; to the provided URL.  **Note**: If the target device is a Solo, it must be in version 3.3.28.0 or higher. 
    # @param merchant_code [String] 
    # @param id [String] The unique identifier of the reader. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_reader_terminate_with_http_info(merchant_code, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReadersApi.create_reader_terminate ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling ReadersApi.create_reader_terminate"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReadersApi.create_reader_terminate"
      end
      if @api_client.config.client_side_validation && id.to_s.length > 30
        fail ArgumentError, 'invalid value for "id" when calling ReadersApi.create_reader_terminate, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && id.to_s.length < 30
        fail ArgumentError, 'invalid value for "id" when calling ReadersApi.create_reader_terminate, the character length must be great than or equal to 30.'
      end

      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/readers/{id}/terminate'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"ReadersApi.create_reader_terminate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReadersApi#create_reader_terminate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a reader
    # Delete a reader.
    # @param merchant_code [String] Unique identifier of the merchant account.
    # @param id [String] The unique identifier of the reader.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_reader(merchant_code, id, opts = {})
      delete_reader_with_http_info(merchant_code, id, opts)
      nil
    end

    # Delete a reader
    # Delete a reader.
    # @param merchant_code [String] Unique identifier of the merchant account.
    # @param id [String] The unique identifier of the reader.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_reader_with_http_info(merchant_code, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReadersApi.delete_reader ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling ReadersApi.delete_reader"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReadersApi.delete_reader"
      end
      if @api_client.config.client_side_validation && id.to_s.length > 30
        fail ArgumentError, 'invalid value for "id" when calling ReadersApi.delete_reader, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && id.to_s.length < 30
        fail ArgumentError, 'invalid value for "id" when calling ReadersApi.delete_reader, the character length must be great than or equal to 30.'
      end

      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/readers/{id}'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"ReadersApi.delete_reader",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReadersApi#delete_reader\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Reader
    # Retrieve a Reader.
    # @param merchant_code [String] Unique identifier of the merchant account.
    # @param id [String] The unique identifier of the reader.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Return the reader only if it has been modified after the specified timestamp given in the headers.  Timestamps are accepted in the following formats:   - HTTP Standard: [IMF format (RFC 5322)](https://www.rfc-editor.org/rfc/rfc5322#section-3.3), sometimes also referred to as [RFC 7231](https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1).  - RFC 3339: Used for timestamps in JSON payloads on this API.
    # @return [Reader]
    def get_reader(merchant_code, id, opts = {})
      data, _status_code, _headers = get_reader_with_http_info(merchant_code, id, opts)
      data
    end

    # Retrieve a Reader
    # Retrieve a Reader.
    # @param merchant_code [String] Unique identifier of the merchant account.
    # @param id [String] The unique identifier of the reader.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Return the reader only if it has been modified after the specified timestamp given in the headers.  Timestamps are accepted in the following formats:   - HTTP Standard: [IMF format (RFC 5322)](https://www.rfc-editor.org/rfc/rfc5322#section-3.3), sometimes also referred to as [RFC 7231](https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1).  - RFC 3339: Used for timestamps in JSON payloads on this API.
    # @return [Array<(Reader, Integer, Hash)>] Reader data, response status code and response headers
    def get_reader_with_http_info(merchant_code, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReadersApi.get_reader ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling ReadersApi.get_reader"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReadersApi.get_reader"
      end
      if @api_client.config.client_side_validation && id.to_s.length > 30
        fail ArgumentError, 'invalid value for "id" when calling ReadersApi.get_reader, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && id.to_s.length < 30
        fail ArgumentError, 'invalid value for "id" when calling ReadersApi.get_reader, the character length must be great than or equal to 30.'
      end

      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/readers/{id}'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Reader'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"ReadersApi.get_reader",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReadersApi#get_reader\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Readers
    # List all readers of the merchant.
    # @param merchant_code [String] Unique identifier of the merchant account.
    # @param [Hash] opts the optional parameters
    # @return [ListReaders200Response]
    def list_readers(merchant_code, opts = {})
      data, _status_code, _headers = list_readers_with_http_info(merchant_code, opts)
      data
    end

    # List Readers
    # List all readers of the merchant.
    # @param merchant_code [String] Unique identifier of the merchant account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListReaders200Response, Integer, Hash)>] ListReaders200Response data, response status code and response headers
    def list_readers_with_http_info(merchant_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReadersApi.list_readers ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling ReadersApi.list_readers"
      end
      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/readers'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListReaders200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"ReadersApi.list_readers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReadersApi#list_readers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Reader
    # Update a Reader.
    # @param merchant_code [String] Unique identifier of the merchant account.
    # @param id [String] The unique identifier of the reader.
    # @param update_reader_request [UpdateReaderRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Reader]
    def update_reader(merchant_code, id, update_reader_request, opts = {})
      data, _status_code, _headers = update_reader_with_http_info(merchant_code, id, update_reader_request, opts)
      data
    end

    # Update a Reader
    # Update a Reader.
    # @param merchant_code [String] Unique identifier of the merchant account.
    # @param id [String] The unique identifier of the reader.
    # @param update_reader_request [UpdateReaderRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reader, Integer, Hash)>] Reader data, response status code and response headers
    def update_reader_with_http_info(merchant_code, id, update_reader_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReadersApi.update_reader ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling ReadersApi.update_reader"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReadersApi.update_reader"
      end
      if @api_client.config.client_side_validation && id.to_s.length > 30
        fail ArgumentError, 'invalid value for "id" when calling ReadersApi.update_reader, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && id.to_s.length < 30
        fail ArgumentError, 'invalid value for "id" when calling ReadersApi.update_reader, the character length must be great than or equal to 30.'
      end

      # verify the required parameter 'update_reader_request' is set
      if @api_client.config.client_side_validation && update_reader_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_reader_request' when calling ReadersApi.update_reader"
      end
      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/readers/{id}'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_reader_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Reader'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"ReadersApi.update_reader",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReadersApi#update_reader\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
