=begin
#SumUp REST API

#SumUpâ€™s REST API operates with [JSON](https://www.json.org/json-en.html) HTTP requests and responses. The request bodies are sent through resource-oriented URLs and use the standard [HTTP response codes](https://developer.mozilla.org/docs/Web/HTTP/Status).  You can experiment and work on your integration in a sandbox that doesn't affect your regular data and doesn't process real transactions. To create a sandbox merchant account visit the [dashboard](https://me.sumup.com/settings/developer). To use the sandbox when interacting with SumUp APIs [create an API](https://me.sumup.com/settings/api-keys) key and use it for [authentication](https://developer.sumup.com/api/authentication). 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module OpenapiClient
  class CheckoutsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a checkout
    # Creates a new payment checkout resource. The unique `checkout_reference` created by this request, is used for further manipulation of the checkout.  For 3DS checkouts, add the `redirect_url` parameter to your request body schema.  Follow by processing a checkout to charge the provided payment instrument. 
    # @param [Hash] opts the optional parameters
    # @option opts [CheckoutCreateRequest] :checkout_create_request 
    # @return [Checkout]
    def create_checkout(opts = {})
      data, _status_code, _headers = create_checkout_with_http_info(opts)
      data
    end

    # Create a checkout
    # Creates a new payment checkout resource. The unique &#x60;checkout_reference&#x60; created by this request, is used for further manipulation of the checkout.  For 3DS checkouts, add the &#x60;redirect_url&#x60; parameter to your request body schema.  Follow by processing a checkout to charge the provided payment instrument. 
    # @param [Hash] opts the optional parameters
    # @option opts [CheckoutCreateRequest] :checkout_create_request 
    # @return [Array<(Checkout, Integer, Hash)>] Checkout data, response status code and response headers
    def create_checkout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckoutsApi.create_checkout ...'
      end
      # resource path
      local_var_path = '/v0.1/checkouts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'checkout_create_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Checkout'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"CheckoutsApi.create_checkout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutsApi#create_checkout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deactivate a checkout
    # Deactivates an identified checkout resource. If the checkout has already been processed it can not be deactivated.
    # @param id [String] Unique ID of the checkout resource.
    # @param [Hash] opts the optional parameters
    # @return [DeactivateCheckout200Response]
    def deactivate_checkout(id, opts = {})
      data, _status_code, _headers = deactivate_checkout_with_http_info(id, opts)
      data
    end

    # Deactivate a checkout
    # Deactivates an identified checkout resource. If the checkout has already been processed it can not be deactivated.
    # @param id [String] Unique ID of the checkout resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeactivateCheckout200Response, Integer, Hash)>] DeactivateCheckout200Response data, response status code and response headers
    def deactivate_checkout_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckoutsApi.deactivate_checkout ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CheckoutsApi.deactivate_checkout"
      end
      # resource path
      local_var_path = '/v0.1/checkouts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeactivateCheckout200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"CheckoutsApi.deactivate_checkout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutsApi#deactivate_checkout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a checkout
    # Retrieves an identified checkout resource. Use this request after processing a checkout to confirm its status and inform the end user respectively.
    # @param id [String] Unique ID of the checkout resource.
    # @param [Hash] opts the optional parameters
    # @return [CheckoutSuccess]
    def get_checkout(id, opts = {})
      data, _status_code, _headers = get_checkout_with_http_info(id, opts)
      data
    end

    # Retrieve a checkout
    # Retrieves an identified checkout resource. Use this request after processing a checkout to confirm its status and inform the end user respectively.
    # @param id [String] Unique ID of the checkout resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckoutSuccess, Integer, Hash)>] CheckoutSuccess data, response status code and response headers
    def get_checkout_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckoutsApi.get_checkout ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CheckoutsApi.get_checkout"
      end
      # resource path
      local_var_path = '/v0.1/checkouts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckoutSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"CheckoutsApi.get_checkout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutsApi#get_checkout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get available payment methods
    # Get payment methods available for the given merchant to use with a checkout.
    # @param merchant_code [String] The SumUp merchant code.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :amount The amount for which the payment methods should be eligible, in major units. Note that currency must also be provided when filtering by amount.
    # @option opts [String] :currency The currency for which the payment methods should be eligible.
    # @return [GetPaymentMethods200Response]
    def get_payment_methods(merchant_code, opts = {})
      data, _status_code, _headers = get_payment_methods_with_http_info(merchant_code, opts)
      data
    end

    # Get available payment methods
    # Get payment methods available for the given merchant to use with a checkout.
    # @param merchant_code [String] The SumUp merchant code.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :amount The amount for which the payment methods should be eligible, in major units. Note that currency must also be provided when filtering by amount.
    # @option opts [String] :currency The currency for which the payment methods should be eligible.
    # @return [Array<(GetPaymentMethods200Response, Integer, Hash)>] GetPaymentMethods200Response data, response status code and response headers
    def get_payment_methods_with_http_info(merchant_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckoutsApi.get_payment_methods ...'
      end
      # verify the required parameter 'merchant_code' is set
      if @api_client.config.client_side_validation && merchant_code.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_code' when calling CheckoutsApi.get_payment_methods"
      end
      # resource path
      local_var_path = '/v0.1/merchants/{merchant_code}/payment-methods'.sub('{' + 'merchant_code' + '}', CGI.escape(merchant_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'amount'] = opts[:'amount'] if !opts[:'amount'].nil?
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPaymentMethods200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"CheckoutsApi.get_payment_methods",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutsApi#get_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List checkouts
    # Lists created checkout resources according to the applied `checkout_reference`.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :checkout_reference Filters the list of checkout resources by the unique ID of the checkout.
    # @return [Array<CheckoutSuccess>]
    def list_checkouts(opts = {})
      data, _status_code, _headers = list_checkouts_with_http_info(opts)
      data
    end

    # List checkouts
    # Lists created checkout resources according to the applied &#x60;checkout_reference&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :checkout_reference Filters the list of checkout resources by the unique ID of the checkout.
    # @return [Array<(Array<CheckoutSuccess>, Integer, Hash)>] Array<CheckoutSuccess> data, response status code and response headers
    def list_checkouts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckoutsApi.list_checkouts ...'
      end
      # resource path
      local_var_path = '/v0.1/checkouts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'checkout_reference'] = opts[:'checkout_reference'] if !opts[:'checkout_reference'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CheckoutSuccess>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"CheckoutsApi.list_checkouts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutsApi#list_checkouts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Process a checkout
    # Processing a checkout will attempt to charge the provided payment instrument for the amount of the specified checkout resource initiated in the `Create a checkout` endpoint.  Follow this request with `Retrieve a checkout` to confirm its status. 
    # @param id [String] Unique ID of the checkout resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CheckoutProcessMixin] :checkout_process_mixin Details of the payment instrument for processing the checkout.
    # @return [CheckoutSuccess]
    def process_checkout(id, opts = {})
      data, _status_code, _headers = process_checkout_with_http_info(id, opts)
      data
    end

    # Process a checkout
    # Processing a checkout will attempt to charge the provided payment instrument for the amount of the specified checkout resource initiated in the &#x60;Create a checkout&#x60; endpoint.  Follow this request with &#x60;Retrieve a checkout&#x60; to confirm its status. 
    # @param id [String] Unique ID of the checkout resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CheckoutProcessMixin] :checkout_process_mixin Details of the payment instrument for processing the checkout.
    # @return [Array<(CheckoutSuccess, Integer, Hash)>] CheckoutSuccess data, response status code and response headers
    def process_checkout_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckoutsApi.process_checkout ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CheckoutsApi.process_checkout"
      end
      # resource path
      local_var_path = '/v0.1/checkouts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'checkout_process_mixin'])

      # return_type
      return_type = opts[:debug_return_type] || 'CheckoutSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"CheckoutsApi.process_checkout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutsApi#process_checkout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
