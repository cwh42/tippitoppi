=begin
#SumUp REST API

#SumUpâ€™s REST API operates with [JSON](https://www.json.org/json-en.html) HTTP requests and responses. The request bodies are sent through resource-oriented URLs and use the standard [HTTP response codes](https://developer.mozilla.org/docs/Web/HTTP/Status).  You can experiment and work on your integration in a sandbox that doesn't affect your regular data and doesn't process real transactions. To create a sandbox merchant account visit the [dashboard](https://me.sumup.com/settings/developer). To use the sandbox when interacting with SumUp APIs [create an API](https://me.sumup.com/settings/api-keys) key and use it for [authentication](https://developer.sumup.com/api/authentication). 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module OpenapiClient
  class MembershipsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List memberships
    # List memberships of the current user.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset of the first member to return. (default to 0)
    # @option opts [Integer] :limit Maximum number of members to return. (default to 10)
    # @option opts [String] :kind Filter memberships by resource kind.
    # @option opts [Boolean] :resource_attributes_sandbox Filter memberships by the sandbox status of the resource the membership is in.
    # @return [ListMemberships200Response]
    def list_memberships(opts = {})
      data, _status_code, _headers = list_memberships_with_http_info(opts)
      data
    end

    # List memberships
    # List memberships of the current user.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset of the first member to return. (default to 0)
    # @option opts [Integer] :limit Maximum number of members to return. (default to 10)
    # @option opts [String] :kind Filter memberships by resource kind.
    # @option opts [Boolean] :resource_attributes_sandbox Filter memberships by the sandbox status of the resource the membership is in.
    # @return [Array<(ListMemberships200Response, Integer, Hash)>] ListMemberships200Response data, response status code and response headers
    def list_memberships_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembershipsApi.list_memberships ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling MembershipsApi.list_memberships, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 25
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling MembershipsApi.list_memberships, must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling MembershipsApi.list_memberships, must be greater than or equal to 1.'
      end

      allowable_values = ["merchant"]
      if @api_client.config.client_side_validation && opts[:'kind'] && !allowable_values.include?(opts[:'kind'])
        fail ArgumentError, "invalid value for \"kind\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v0.1/memberships'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?
      query_params[:'resource.attributes.sandbox'] = opts[:'resource_attributes_sandbox'] if !opts[:'resource_attributes_sandbox'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListMemberships200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'oauth2', 'oauth2']

      new_options = opts.merge(
        :operation => :"MembershipsApi.list_memberships",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembershipsApi#list_memberships\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
