=begin
#SumUp REST API

#SumUpâ€™s REST API operates with [JSON](https://www.json.org/json-en.html) HTTP requests and responses. The request bodies are sent through resource-oriented URLs and use the standard [HTTP response codes](https://developer.mozilla.org/docs/Web/HTTP/Status).  You can experiment and work on your integration in a sandbox that doesn't affect your regular data and doesn't process real transactions. To create a sandbox merchant account visit the [dashboard](https://me.sumup.com/settings/developer). To use the sandbox when interacting with SumUp APIs [create an API](https://me.sumup.com/settings/api-keys) key and use it for [authentication](https://developer.sumup.com/api/authentication). 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Mobile app settings
  class AppSettings
    # Checkout preference
    attr_accessor :checkout_preference

    # Include vat.
    attr_accessor :include_vat

    # Manual entry tutorial.
    attr_accessor :manual_entry_tutorial

    # Mobile payment tutorial.
    attr_accessor :mobile_payment_tutorial

    # Tax enabled.
    attr_accessor :tax_enabled

    # Mobile payment.
    attr_accessor :mobile_payment

    # Reader payment.
    attr_accessor :reader_payment

    # Cash payment.
    attr_accessor :cash_payment

    # Advanced mode.
    attr_accessor :advanced_mode

    # Expected max transaction amount.
    attr_accessor :expected_max_transaction_amount

    # Manual entry.
    attr_accessor :manual_entry

    # Terminal mode tutorial.
    attr_accessor :terminal_mode_tutorial

    # Tipping.
    attr_accessor :tipping

    # Tip rates.
    attr_accessor :tip_rates

    # Barcode scanner.
    attr_accessor :barcode_scanner

    # Referral.
    attr_accessor :referral

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'checkout_preference' => :'checkout_preference',
        :'include_vat' => :'include_vat',
        :'manual_entry_tutorial' => :'manual_entry_tutorial',
        :'mobile_payment_tutorial' => :'mobile_payment_tutorial',
        :'tax_enabled' => :'tax_enabled',
        :'mobile_payment' => :'mobile_payment',
        :'reader_payment' => :'reader_payment',
        :'cash_payment' => :'cash_payment',
        :'advanced_mode' => :'advanced_mode',
        :'expected_max_transaction_amount' => :'expected_max_transaction_amount',
        :'manual_entry' => :'manual_entry',
        :'terminal_mode_tutorial' => :'terminal_mode_tutorial',
        :'tipping' => :'tipping',
        :'tip_rates' => :'tip_rates',
        :'barcode_scanner' => :'barcode_scanner',
        :'referral' => :'referral'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'checkout_preference' => :'String',
        :'include_vat' => :'Boolean',
        :'manual_entry_tutorial' => :'Boolean',
        :'mobile_payment_tutorial' => :'Boolean',
        :'tax_enabled' => :'Boolean',
        :'mobile_payment' => :'String',
        :'reader_payment' => :'String',
        :'cash_payment' => :'String',
        :'advanced_mode' => :'String',
        :'expected_max_transaction_amount' => :'Float',
        :'manual_entry' => :'String',
        :'terminal_mode_tutorial' => :'Boolean',
        :'tipping' => :'String',
        :'tip_rates' => :'Array<Float>',
        :'barcode_scanner' => :'String',
        :'referral' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::AppSettings` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::AppSettings`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'checkout_preference')
        self.checkout_preference = attributes[:'checkout_preference']
      end

      if attributes.key?(:'include_vat')
        self.include_vat = attributes[:'include_vat']
      end

      if attributes.key?(:'manual_entry_tutorial')
        self.manual_entry_tutorial = attributes[:'manual_entry_tutorial']
      end

      if attributes.key?(:'mobile_payment_tutorial')
        self.mobile_payment_tutorial = attributes[:'mobile_payment_tutorial']
      end

      if attributes.key?(:'tax_enabled')
        self.tax_enabled = attributes[:'tax_enabled']
      end

      if attributes.key?(:'mobile_payment')
        self.mobile_payment = attributes[:'mobile_payment']
      end

      if attributes.key?(:'reader_payment')
        self.reader_payment = attributes[:'reader_payment']
      end

      if attributes.key?(:'cash_payment')
        self.cash_payment = attributes[:'cash_payment']
      end

      if attributes.key?(:'advanced_mode')
        self.advanced_mode = attributes[:'advanced_mode']
      end

      if attributes.key?(:'expected_max_transaction_amount')
        self.expected_max_transaction_amount = attributes[:'expected_max_transaction_amount']
      end

      if attributes.key?(:'manual_entry')
        self.manual_entry = attributes[:'manual_entry']
      end

      if attributes.key?(:'terminal_mode_tutorial')
        self.terminal_mode_tutorial = attributes[:'terminal_mode_tutorial']
      end

      if attributes.key?(:'tipping')
        self.tipping = attributes[:'tipping']
      end

      if attributes.key?(:'tip_rates')
        if (value = attributes[:'tip_rates']).is_a?(Array)
          self.tip_rates = value
        end
      end

      if attributes.key?(:'barcode_scanner')
        self.barcode_scanner = attributes[:'barcode_scanner']
      end

      if attributes.key?(:'referral')
        self.referral = attributes[:'referral']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          checkout_preference == o.checkout_preference &&
          include_vat == o.include_vat &&
          manual_entry_tutorial == o.manual_entry_tutorial &&
          mobile_payment_tutorial == o.mobile_payment_tutorial &&
          tax_enabled == o.tax_enabled &&
          mobile_payment == o.mobile_payment &&
          reader_payment == o.reader_payment &&
          cash_payment == o.cash_payment &&
          advanced_mode == o.advanced_mode &&
          expected_max_transaction_amount == o.expected_max_transaction_amount &&
          manual_entry == o.manual_entry &&
          terminal_mode_tutorial == o.terminal_mode_tutorial &&
          tipping == o.tipping &&
          tip_rates == o.tip_rates &&
          barcode_scanner == o.barcode_scanner &&
          referral == o.referral
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [checkout_preference, include_vat, manual_entry_tutorial, mobile_payment_tutorial, tax_enabled, mobile_payment, reader_payment, cash_payment, advanced_mode, expected_max_transaction_amount, manual_entry, terminal_mode_tutorial, tipping, tip_rates, barcode_scanner, referral].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
