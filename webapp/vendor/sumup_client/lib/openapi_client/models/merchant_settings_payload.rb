=begin
#SumUp REST API

#SumUpâ€™s REST API operates with [JSON](https://www.json.org/json-en.html) HTTP requests and responses. The request bodies are sent through resource-oriented URLs and use the standard [HTTP response codes](https://developer.mozilla.org/docs/Web/HTTP/Status).  You can experiment and work on your integration in a sandbox that doesn't affect your regular data and doesn't process real transactions. To create a sandbox merchant account visit the [dashboard](https://me.sumup.com/settings/developer). To use the sandbox when interacting with SumUp APIs [create an API](https://me.sumup.com/settings/api-keys) key and use it for [authentication](https://developer.sumup.com/api/authentication). 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module OpenapiClient
  class MerchantSettingsPayload
    # Payout period.
    attr_accessor :payout_period

    # Payout type.
    attr_accessor :payout_type

    # If true, the merchant will not receive automatic payouts.
    attr_accessor :payout_on_demand

    # If true, the merchant will be able to manage  payout_on_demand settings
    attr_accessor :payout_on_demand_available

    # Expected maximum amount of a single purchase
    attr_accessor :expected_max_transaction_amount

    # Printers enabled.
    attr_accessor :printers_enabled

    # Gross settlement
    attr_accessor :gross_settlement

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'payout_period' => :'payout_period',
        :'payout_type' => :'payout_type',
        :'payout_on_demand' => :'payout_on_demand',
        :'payout_on_demand_available' => :'payout_on_demand_available',
        :'expected_max_transaction_amount' => :'expected_max_transaction_amount',
        :'printers_enabled' => :'printers_enabled',
        :'gross_settlement' => :'gross_settlement'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'payout_period' => :'String',
        :'payout_type' => :'String',
        :'payout_on_demand' => :'Boolean',
        :'payout_on_demand_available' => :'String',
        :'expected_max_transaction_amount' => :'Float',
        :'printers_enabled' => :'Boolean',
        :'gross_settlement' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::MerchantSettingsPayload` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::MerchantSettingsPayload`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'payout_period')
        self.payout_period = attributes[:'payout_period']
      end

      if attributes.key?(:'payout_type')
        self.payout_type = attributes[:'payout_type']
      end

      if attributes.key?(:'payout_on_demand')
        self.payout_on_demand = attributes[:'payout_on_demand']
      end

      if attributes.key?(:'payout_on_demand_available')
        self.payout_on_demand_available = attributes[:'payout_on_demand_available']
      end

      if attributes.key?(:'expected_max_transaction_amount')
        self.expected_max_transaction_amount = attributes[:'expected_max_transaction_amount']
      end

      if attributes.key?(:'printers_enabled')
        self.printers_enabled = attributes[:'printers_enabled']
      end

      if attributes.key?(:'gross_settlement')
        self.gross_settlement = attributes[:'gross_settlement']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      payout_period_validator = EnumAttributeValidator.new('String', ["daily", "weekly", "monthly"])
      return false unless payout_period_validator.valid?(@payout_period)
      payout_type_validator = EnumAttributeValidator.new('String', ["SINGLE_PAYMENT"])
      return false unless payout_type_validator.valid?(@payout_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payout_period Object to be assigned
    def payout_period=(payout_period)
      validator = EnumAttributeValidator.new('String', ["daily", "weekly", "monthly"])
      unless validator.valid?(payout_period)
        fail ArgumentError, "invalid value for \"payout_period\", must be one of #{validator.allowable_values}."
      end
      @payout_period = payout_period
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payout_type Object to be assigned
    def payout_type=(payout_type)
      validator = EnumAttributeValidator.new('String', ["SINGLE_PAYMENT"])
      unless validator.valid?(payout_type)
        fail ArgumentError, "invalid value for \"payout_type\", must be one of #{validator.allowable_values}."
      end
      @payout_type = payout_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          payout_period == o.payout_period &&
          payout_type == o.payout_type &&
          payout_on_demand == o.payout_on_demand &&
          payout_on_demand_available == o.payout_on_demand_available &&
          expected_max_transaction_amount == o.expected_max_transaction_amount &&
          printers_enabled == o.printers_enabled &&
          gross_settlement == o.gross_settlement
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [payout_period, payout_type, payout_on_demand, payout_on_demand_available, expected_max_transaction_amount, printers_enabled, gross_settlement].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
