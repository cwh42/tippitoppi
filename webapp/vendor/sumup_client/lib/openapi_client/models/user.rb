=begin
#SumUp REST API

#SumUp’s REST API operates with [JSON](https://www.json.org/json-en.html) HTTP requests and responses. The request bodies are sent through resource-oriented URLs and use the standard [HTTP response codes](https://developer.mozilla.org/docs/Web/HTTP/Status).  You can experiment and work on your integration in a sandbox that doesn't affect your regular data and doesn't process real transactions. To create a sandbox merchant account visit the [dashboard](https://me.sumup.com/settings/developer). To use the sandbox when interacting with SumUp APIs [create an API](https://me.sumup.com/settings/api-keys) key and use it for [authentication](https://developer.sumup.com/api/authentication). 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module OpenapiClient
  # The userinfo response
  class User
    # Identifier for the End-User (also called Subject).
    attr_accessor :id

    # Time the End-User was created. 
    attr_accessor :created_at

    # Time the End-User's information was last updated. 
    attr_accessor :updated_at

    # Time the End-User was blocked. 
    attr_accessor :blocked_at

    # End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon this value being unique, for unique identification use ID instead. 
    attr_accessor :email

    # True if the End-User's e-mail address has been verified; otherwise false. When this Claim Value is true, this means that the we took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. 
    attr_accessor :email_verified

    # End-User's preferred telephone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. For example, +1 (425) 555-1212 or +56 (2) 687 2400. Can be empty if the user doesn't have phone number set.
    attr_accessor :phone_number

    # True if the End-User's phone number has been verified; otherwise false. When this Claim Value is true, this means that we took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed. 
    attr_accessor :phone_number_verified

    # Any additional attributes associated with the user such as parameters present during the signup.
    attr_accessor :attributes

    # End-User's locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. 
    attr_accessor :locale

    attr_accessor :tos_acceptance

    # True if the user has given consent to marketing communication. **This is only valid on user creation. Identity does not store or track the consent over time, should the user for example choose to revoke.** 
    attr_accessor :marketing_consent

    # String from zoneinfo time zone database representing the user's time zone.
    attr_accessor :zoneinfo

    # End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences.
    attr_accessor :name

    # Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
    attr_accessor :nickname

    # Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
    attr_accessor :given_name

    # Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.
    attr_accessor :middle_name

    # Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
    attr_accessor :family_name

    # End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.
    attr_accessor :gender

    # End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format.
    attr_accessor :birthdate

    attr_accessor :address

    # True if the End-User's wants to enabled MFA on login, false otherwise. 
    attr_accessor :mfa_on_login_enabled

    # True if the End-User's wants to disable MFA completely, false otherwise. 
    attr_accessor :mfa_disabled

    # Time the End-User's password was last updated. 
    attr_accessor :password_updated_at

    # URL of the End-User's profile picture. This URL refers to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. 
    attr_accessor :picture

    # Indicates whether a user is a managed user. Managed users are team members for which the owner of the merchant has set the password. These users have not gone through an invitation flow and cannot own merchants of their own or be invited to other merchants. 
    attr_accessor :is_virtual

    # Indicates whether a user is a service account. 
    attr_accessor :is_service_account

    # Experimental features that the user has enabled for themselves. 
    attr_accessor :feature_previews

    # User's preference for the color scheme. 
    attr_accessor :color_scheme_preference

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'blocked_at' => :'blocked_at',
        :'email' => :'email',
        :'email_verified' => :'email_verified',
        :'phone_number' => :'phone_number',
        :'phone_number_verified' => :'phone_number_verified',
        :'attributes' => :'attributes',
        :'locale' => :'locale',
        :'tos_acceptance' => :'tos_acceptance',
        :'marketing_consent' => :'marketing_consent',
        :'zoneinfo' => :'zoneinfo',
        :'name' => :'name',
        :'nickname' => :'nickname',
        :'given_name' => :'given_name',
        :'middle_name' => :'middle_name',
        :'family_name' => :'family_name',
        :'gender' => :'gender',
        :'birthdate' => :'birthdate',
        :'address' => :'address',
        :'mfa_on_login_enabled' => :'mfa_on_login_enabled',
        :'mfa_disabled' => :'mfa_disabled',
        :'password_updated_at' => :'password_updated_at',
        :'picture' => :'picture',
        :'is_virtual' => :'is_virtual',
        :'is_service_account' => :'is_service_account',
        :'feature_previews' => :'feature_previews',
        :'color_scheme_preference' => :'color_scheme_preference'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'blocked_at' => :'Time',
        :'email' => :'String',
        :'email_verified' => :'Boolean',
        :'phone_number' => :'String',
        :'phone_number_verified' => :'Boolean',
        :'attributes' => :'Object',
        :'locale' => :'String',
        :'tos_acceptance' => :'ToSAcceptance',
        :'marketing_consent' => :'Boolean',
        :'zoneinfo' => :'String',
        :'name' => :'String',
        :'nickname' => :'String',
        :'given_name' => :'String',
        :'middle_name' => :'String',
        :'family_name' => :'String',
        :'gender' => :'String',
        :'birthdate' => :'Time',
        :'address' => :'Address',
        :'mfa_on_login_enabled' => :'Boolean',
        :'mfa_disabled' => :'Boolean',
        :'password_updated_at' => :'Time',
        :'picture' => :'String',
        :'is_virtual' => :'Boolean',
        :'is_service_account' => :'Boolean',
        :'feature_previews' => :'Hash<String, Boolean>',
        :'color_scheme_preference' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'zoneinfo',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::User` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::User`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'blocked_at')
        self.blocked_at = attributes[:'blocked_at']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      else
        self.email = nil
      end

      if attributes.key?(:'email_verified')
        self.email_verified = attributes[:'email_verified']
      else
        self.email_verified = nil
      end

      if attributes.key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      else
        self.phone_number = nil
      end

      if attributes.key?(:'phone_number_verified')
        self.phone_number_verified = attributes[:'phone_number_verified']
      else
        self.phone_number_verified = nil
      end

      if attributes.key?(:'attributes')
        self.attributes = attributes[:'attributes']
      end

      if attributes.key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.key?(:'tos_acceptance')
        self.tos_acceptance = attributes[:'tos_acceptance']
      end

      if attributes.key?(:'marketing_consent')
        self.marketing_consent = attributes[:'marketing_consent']
      else
        self.marketing_consent = nil
      end

      if attributes.key?(:'zoneinfo')
        self.zoneinfo = attributes[:'zoneinfo']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'nickname')
        self.nickname = attributes[:'nickname']
      end

      if attributes.key?(:'given_name')
        self.given_name = attributes[:'given_name']
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'family_name')
        self.family_name = attributes[:'family_name']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'birthdate')
        self.birthdate = attributes[:'birthdate']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'mfa_on_login_enabled')
        self.mfa_on_login_enabled = attributes[:'mfa_on_login_enabled']
      else
        self.mfa_on_login_enabled = nil
      end

      if attributes.key?(:'mfa_disabled')
        self.mfa_disabled = attributes[:'mfa_disabled']
      else
        self.mfa_disabled = nil
      end

      if attributes.key?(:'password_updated_at')
        self.password_updated_at = attributes[:'password_updated_at']
      end

      if attributes.key?(:'picture')
        self.picture = attributes[:'picture']
      end

      if attributes.key?(:'is_virtual')
        self.is_virtual = attributes[:'is_virtual']
      else
        self.is_virtual = nil
      end

      if attributes.key?(:'is_service_account')
        self.is_service_account = attributes[:'is_service_account']
      end

      if attributes.key?(:'feature_previews')
        if (value = attributes[:'feature_previews']).is_a?(Hash)
          self.feature_previews = value
        end
      end

      if attributes.key?(:'color_scheme_preference')
        self.color_scheme_preference = attributes[:'color_scheme_preference']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @email_verified.nil?
        invalid_properties.push('invalid value for "email_verified", email_verified cannot be nil.')
      end

      if @phone_number.nil?
        invalid_properties.push('invalid value for "phone_number", phone_number cannot be nil.')
      end

      if @phone_number_verified.nil?
        invalid_properties.push('invalid value for "phone_number_verified", phone_number_verified cannot be nil.')
      end

      if @marketing_consent.nil?
        invalid_properties.push('invalid value for "marketing_consent", marketing_consent cannot be nil.')
      end

      if !@zoneinfo.nil? && @zoneinfo.to_s.length > 124
        invalid_properties.push('invalid value for "zoneinfo", the character length must be smaller than or equal to 124.')
      end

      if @mfa_on_login_enabled.nil?
        invalid_properties.push('invalid value for "mfa_on_login_enabled", mfa_on_login_enabled cannot be nil.')
      end

      if @mfa_disabled.nil?
        invalid_properties.push('invalid value for "mfa_disabled", mfa_disabled cannot be nil.')
      end

      if @is_virtual.nil?
        invalid_properties.push('invalid value for "is_virtual", is_virtual cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      return false if @email.nil?
      return false if @email_verified.nil?
      return false if @phone_number.nil?
      return false if @phone_number_verified.nil?
      return false if @marketing_consent.nil?
      return false if !@zoneinfo.nil? && @zoneinfo.to_s.length > 124
      return false if @mfa_on_login_enabled.nil?
      return false if @mfa_disabled.nil?
      return false if @is_virtual.nil?
      color_scheme_preference_validator = EnumAttributeValidator.new('String', ["light", "dark", "system"])
      return false unless color_scheme_preference_validator.valid?(@color_scheme_preference)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] zoneinfo Value to be assigned
    def zoneinfo=(zoneinfo)
      if !zoneinfo.nil? && zoneinfo.to_s.length > 124
        fail ArgumentError, 'invalid value for "zoneinfo", the character length must be smaller than or equal to 124.'
      end

      @zoneinfo = zoneinfo
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] color_scheme_preference Object to be assigned
    def color_scheme_preference=(color_scheme_preference)
      validator = EnumAttributeValidator.new('String', ["light", "dark", "system"])
      unless validator.valid?(color_scheme_preference)
        fail ArgumentError, "invalid value for \"color_scheme_preference\", must be one of #{validator.allowable_values}."
      end
      @color_scheme_preference = color_scheme_preference
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          blocked_at == o.blocked_at &&
          email == o.email &&
          email_verified == o.email_verified &&
          phone_number == o.phone_number &&
          phone_number_verified == o.phone_number_verified &&
          attributes == o.attributes &&
          locale == o.locale &&
          tos_acceptance == o.tos_acceptance &&
          marketing_consent == o.marketing_consent &&
          zoneinfo == o.zoneinfo &&
          name == o.name &&
          nickname == o.nickname &&
          given_name == o.given_name &&
          middle_name == o.middle_name &&
          family_name == o.family_name &&
          gender == o.gender &&
          birthdate == o.birthdate &&
          address == o.address &&
          mfa_on_login_enabled == o.mfa_on_login_enabled &&
          mfa_disabled == o.mfa_disabled &&
          password_updated_at == o.password_updated_at &&
          picture == o.picture &&
          is_virtual == o.is_virtual &&
          is_service_account == o.is_service_account &&
          feature_previews == o.feature_previews &&
          color_scheme_preference == o.color_scheme_preference
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, created_at, updated_at, blocked_at, email, email_verified, phone_number, phone_number_verified, attributes, locale, tos_acceptance, marketing_consent, zoneinfo, name, nickname, given_name, middle_name, family_name, gender, birthdate, address, mfa_on_login_enabled, mfa_disabled, password_updated_at, picture, is_virtual, is_service_account, feature_previews, color_scheme_preference].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
