=begin
#SumUp REST API

#SumUpâ€™s REST API operates with [JSON](https://www.json.org/json-en.html) HTTP requests and responses. The request bodies are sent through resource-oriented URLs and use the standard [HTTP response codes](https://developer.mozilla.org/docs/Web/HTTP/Status).  You can experiment and work on your integration in a sandbox that doesn't affect your regular data and doesn't process real transactions. To create a sandbox merchant account visit the [dashboard](https://me.sumup.com/settings/developer). To use the sandbox when interacting with SumUp APIs [create an API](https://me.sumup.com/settings/api-keys) key and use it for [authentication](https://developer.sumup.com/api/authentication). 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module OpenapiClient
  class TransactionFull
    # Unique ID of the transaction.
    attr_accessor :id

    # Transaction code returned by the acquirer/processing entity after processing the transaction.
    attr_accessor :transaction_code

    # Total amount of the transaction.
    attr_accessor :amount

    attr_accessor :currency

    # Date and time of the creation of the transaction. Response format expressed according to [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) code.
    attr_accessor :timestamp

    # Current status of the transaction.
    attr_accessor :status

    # Payment type used for the transaction.
    attr_accessor :payment_type

    # Current number of the installment for deferred payments.
    attr_accessor :installments_count

    # Unique code of the registered merchant to whom the payment is made.
    attr_accessor :merchant_code

    # Amount of the applicable VAT (out of the total transaction amount).
    attr_accessor :vat_amount

    # Amount of the tip (out of the total transaction amount).
    attr_accessor :tip_amount

    # Entry mode of the payment details.
    attr_accessor :entry_mode

    # Authorization code for the transaction sent by the payment card issuer or bank. Applicable only to card payments.
    attr_accessor :auth_code

    # Internal unique ID of the transaction on the SumUp platform.
    attr_accessor :internal_id

    # Short description of the payment. The value is taken from the `description` property of the related checkout resource.
    attr_accessor :product_summary

    # Total number of payouts to the registered user specified in the `user` property.
    attr_accessor :payouts_total

    # Number of payouts that are made to the registered user specified in the `user` property.
    attr_accessor :payouts_received

    # Payout plan of the registered user at the time when the transaction was made.
    attr_accessor :payout_plan

    # Email address of the registered user (merchant) to whom the payment is made.
    attr_accessor :username

    # Latitude value from the coordinates of the payment location (as received from the payment terminal reader).
    attr_accessor :lat

    # Longitude value from the coordinates of the payment location (as received from the payment terminal reader).
    attr_accessor :lon

    # Indication of the precision of the geographical position received from the payment terminal.
    attr_accessor :horizontal_accuracy

    # Simple name of the payment type.
    attr_accessor :simple_payment_type

    # Verification method used for the transaction.
    attr_accessor :verification_method

    attr_accessor :card

    # Local date and time of the creation of the transaction.
    attr_accessor :local_time

    # Payout type for the transaction.
    attr_accessor :payout_type

    # List of products from the merchant's catalogue for which the transaction serves as a payment.
    attr_accessor :products

    # List of VAT rates applicable to the transaction.
    attr_accessor :vat_rates

    # List of transaction events related to the transaction.
    attr_accessor :transaction_events

    # Status generated from the processing status and the latest transaction state.
    attr_accessor :simple_status

    # List of hyperlinks for accessing related resources.
    attr_accessor :links

    # List of events related to the transaction.
    attr_accessor :events

    attr_accessor :location

    # Indicates whether tax deduction is enabled for the transaction.
    attr_accessor :tax_enabled

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'transaction_code' => :'transaction_code',
        :'amount' => :'amount',
        :'currency' => :'currency',
        :'timestamp' => :'timestamp',
        :'status' => :'status',
        :'payment_type' => :'payment_type',
        :'installments_count' => :'installments_count',
        :'merchant_code' => :'merchant_code',
        :'vat_amount' => :'vat_amount',
        :'tip_amount' => :'tip_amount',
        :'entry_mode' => :'entry_mode',
        :'auth_code' => :'auth_code',
        :'internal_id' => :'internal_id',
        :'product_summary' => :'product_summary',
        :'payouts_total' => :'payouts_total',
        :'payouts_received' => :'payouts_received',
        :'payout_plan' => :'payout_plan',
        :'username' => :'username',
        :'lat' => :'lat',
        :'lon' => :'lon',
        :'horizontal_accuracy' => :'horizontal_accuracy',
        :'simple_payment_type' => :'simple_payment_type',
        :'verification_method' => :'verification_method',
        :'card' => :'card',
        :'local_time' => :'local_time',
        :'payout_type' => :'payout_type',
        :'products' => :'products',
        :'vat_rates' => :'vat_rates',
        :'transaction_events' => :'transaction_events',
        :'simple_status' => :'simple_status',
        :'links' => :'links',
        :'events' => :'events',
        :'location' => :'location',
        :'tax_enabled' => :'tax_enabled'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'transaction_code' => :'String',
        :'amount' => :'Float',
        :'currency' => :'Currency',
        :'timestamp' => :'Time',
        :'status' => :'String',
        :'payment_type' => :'String',
        :'installments_count' => :'Integer',
        :'merchant_code' => :'String',
        :'vat_amount' => :'Float',
        :'tip_amount' => :'Float',
        :'entry_mode' => :'String',
        :'auth_code' => :'String',
        :'internal_id' => :'Integer',
        :'product_summary' => :'String',
        :'payouts_total' => :'Integer',
        :'payouts_received' => :'Integer',
        :'payout_plan' => :'String',
        :'username' => :'String',
        :'lat' => :'Float',
        :'lon' => :'Float',
        :'horizontal_accuracy' => :'Float',
        :'simple_payment_type' => :'String',
        :'verification_method' => :'String',
        :'card' => :'CardResponse',
        :'local_time' => :'Time',
        :'payout_type' => :'String',
        :'products' => :'Array<Product>',
        :'vat_rates' => :'Array<Object>',
        :'transaction_events' => :'Array<TransactionEvent>',
        :'simple_status' => :'String',
        :'links' => :'Array<TransactionFullAllOfLinks>',
        :'events' => :'Array<Event>',
        :'location' => :'TransactionFullAllOfLocation',
        :'tax_enabled' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'TransactionMixinBase',
      :'TransactionMixinCheckout',
      :'TransactionMixinHistory'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::TransactionFull` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::TransactionFull`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'transaction_code')
        self.transaction_code = attributes[:'transaction_code']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'payment_type')
        self.payment_type = attributes[:'payment_type']
      end

      if attributes.key?(:'installments_count')
        self.installments_count = attributes[:'installments_count']
      end

      if attributes.key?(:'merchant_code')
        self.merchant_code = attributes[:'merchant_code']
      end

      if attributes.key?(:'vat_amount')
        self.vat_amount = attributes[:'vat_amount']
      end

      if attributes.key?(:'tip_amount')
        self.tip_amount = attributes[:'tip_amount']
      end

      if attributes.key?(:'entry_mode')
        self.entry_mode = attributes[:'entry_mode']
      end

      if attributes.key?(:'auth_code')
        self.auth_code = attributes[:'auth_code']
      end

      if attributes.key?(:'internal_id')
        self.internal_id = attributes[:'internal_id']
      end

      if attributes.key?(:'product_summary')
        self.product_summary = attributes[:'product_summary']
      end

      if attributes.key?(:'payouts_total')
        self.payouts_total = attributes[:'payouts_total']
      end

      if attributes.key?(:'payouts_received')
        self.payouts_received = attributes[:'payouts_received']
      end

      if attributes.key?(:'payout_plan')
        self.payout_plan = attributes[:'payout_plan']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'lat')
        self.lat = attributes[:'lat']
      end

      if attributes.key?(:'lon')
        self.lon = attributes[:'lon']
      end

      if attributes.key?(:'horizontal_accuracy')
        self.horizontal_accuracy = attributes[:'horizontal_accuracy']
      end

      if attributes.key?(:'simple_payment_type')
        self.simple_payment_type = attributes[:'simple_payment_type']
      end

      if attributes.key?(:'verification_method')
        self.verification_method = attributes[:'verification_method']
      end

      if attributes.key?(:'card')
        self.card = attributes[:'card']
      end

      if attributes.key?(:'local_time')
        self.local_time = attributes[:'local_time']
      end

      if attributes.key?(:'payout_type')
        self.payout_type = attributes[:'payout_type']
      end

      if attributes.key?(:'products')
        if (value = attributes[:'products']).is_a?(Array)
          self.products = value
        end
      end

      if attributes.key?(:'vat_rates')
        if (value = attributes[:'vat_rates']).is_a?(Array)
          self.vat_rates = value
        end
      end

      if attributes.key?(:'transaction_events')
        if (value = attributes[:'transaction_events']).is_a?(Array)
          self.transaction_events = value
        end
      end

      if attributes.key?(:'simple_status')
        self.simple_status = attributes[:'simple_status']
      end

      if attributes.key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.key?(:'events')
        if (value = attributes[:'events']).is_a?(Array)
          self.events = value
        end
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'tax_enabled')
        self.tax_enabled = attributes[:'tax_enabled']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@installments_count.nil? && @installments_count < 1
        invalid_properties.push('invalid value for "installments_count", must be greater than or equal to 1.')
      end

      if !@lat.nil? && @lat > 90
        invalid_properties.push('invalid value for "lat", must be smaller than or equal to 90.')
      end

      if !@lat.nil? && @lat < 0
        invalid_properties.push('invalid value for "lat", must be greater than or equal to 0.')
      end

      if !@lon.nil? && @lon > 180
        invalid_properties.push('invalid value for "lon", must be smaller than or equal to 180.')
      end

      if !@lon.nil? && @lon < 0
        invalid_properties.push('invalid value for "lon", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      status_validator = EnumAttributeValidator.new('String', ["SUCCESSFUL", "CANCELLED", "FAILED", "PENDING"])
      return false unless status_validator.valid?(@status)
      payment_type_validator = EnumAttributeValidator.new('String', ["POS", "ECOM", "RECURRING", "BOLETO"])
      return false unless payment_type_validator.valid?(@payment_type)
      return false if !@installments_count.nil? && @installments_count < 1
      entry_mode_validator = EnumAttributeValidator.new('String', ["chip", "contactless", "CUSTOMER_ENTRY", "BOLETO"])
      return false unless entry_mode_validator.valid?(@entry_mode)
      payout_plan_validator = EnumAttributeValidator.new('String', ["SINGLE_PAYMENT", "TRUE_INSTALLMENT", "ACCELERATED_INSTALLMENT"])
      return false unless payout_plan_validator.valid?(@payout_plan)
      return false if !@lat.nil? && @lat > 90
      return false if !@lat.nil? && @lat < 0
      return false if !@lon.nil? && @lon > 180
      return false if !@lon.nil? && @lon < 0
      simple_payment_type_validator = EnumAttributeValidator.new('String', ["MOTO", "CASH", "CC_SIGNATURE", "ELV", "CC_CUSTOMER_ENTERED", "MANUAL_ENTRY", "EMV"])
      return false unless simple_payment_type_validator.valid?(@simple_payment_type)
      verification_method_validator = EnumAttributeValidator.new('String', ["na", "none", "signature", "offline PIN", "online PIN", "offline pin + signature", "confirmation code verified"])
      return false unless verification_method_validator.valid?(@verification_method)
      payout_type_validator = EnumAttributeValidator.new('String', ["BANK_ACCOUNT", "BALANCE", "PREPAID_CARD"])
      return false unless payout_type_validator.valid?(@payout_type)
      simple_status_validator = EnumAttributeValidator.new('String', ["SUCCESSFUL", "PAID_OUT", "CANCEL_FAILED", "CANCELLED", "CHARGEBACK", "FAILED", "REFUND_FAILED", "REFUNDED", "NON_COLLECTION"])
      return false unless simple_status_validator.valid?(@simple_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["SUCCESSFUL", "CANCELLED", "FAILED", "PENDING"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_type Object to be assigned
    def payment_type=(payment_type)
      validator = EnumAttributeValidator.new('String', ["POS", "ECOM", "RECURRING", "BOLETO"])
      unless validator.valid?(payment_type)
        fail ArgumentError, "invalid value for \"payment_type\", must be one of #{validator.allowable_values}."
      end
      @payment_type = payment_type
    end

    # Custom attribute writer method with validation
    # @param [Object] installments_count Value to be assigned
    def installments_count=(installments_count)
      if installments_count.nil?
        fail ArgumentError, 'installments_count cannot be nil'
      end

      if installments_count < 1
        fail ArgumentError, 'invalid value for "installments_count", must be greater than or equal to 1.'
      end

      @installments_count = installments_count
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] entry_mode Object to be assigned
    def entry_mode=(entry_mode)
      validator = EnumAttributeValidator.new('String', ["chip", "contactless", "CUSTOMER_ENTRY", "BOLETO"])
      unless validator.valid?(entry_mode)
        fail ArgumentError, "invalid value for \"entry_mode\", must be one of #{validator.allowable_values}."
      end
      @entry_mode = entry_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payout_plan Object to be assigned
    def payout_plan=(payout_plan)
      validator = EnumAttributeValidator.new('String', ["SINGLE_PAYMENT", "TRUE_INSTALLMENT", "ACCELERATED_INSTALLMENT"])
      unless validator.valid?(payout_plan)
        fail ArgumentError, "invalid value for \"payout_plan\", must be one of #{validator.allowable_values}."
      end
      @payout_plan = payout_plan
    end

    # Custom attribute writer method with validation
    # @param [Object] lat Value to be assigned
    def lat=(lat)
      if lat.nil?
        fail ArgumentError, 'lat cannot be nil'
      end

      if lat > 90
        fail ArgumentError, 'invalid value for "lat", must be smaller than or equal to 90.'
      end

      if lat < 0
        fail ArgumentError, 'invalid value for "lat", must be greater than or equal to 0.'
      end

      @lat = lat
    end

    # Custom attribute writer method with validation
    # @param [Object] lon Value to be assigned
    def lon=(lon)
      if lon.nil?
        fail ArgumentError, 'lon cannot be nil'
      end

      if lon > 180
        fail ArgumentError, 'invalid value for "lon", must be smaller than or equal to 180.'
      end

      if lon < 0
        fail ArgumentError, 'invalid value for "lon", must be greater than or equal to 0.'
      end

      @lon = lon
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] simple_payment_type Object to be assigned
    def simple_payment_type=(simple_payment_type)
      validator = EnumAttributeValidator.new('String', ["MOTO", "CASH", "CC_SIGNATURE", "ELV", "CC_CUSTOMER_ENTERED", "MANUAL_ENTRY", "EMV"])
      unless validator.valid?(simple_payment_type)
        fail ArgumentError, "invalid value for \"simple_payment_type\", must be one of #{validator.allowable_values}."
      end
      @simple_payment_type = simple_payment_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verification_method Object to be assigned
    def verification_method=(verification_method)
      validator = EnumAttributeValidator.new('String', ["na", "none", "signature", "offline PIN", "online PIN", "offline pin + signature", "confirmation code verified"])
      unless validator.valid?(verification_method)
        fail ArgumentError, "invalid value for \"verification_method\", must be one of #{validator.allowable_values}."
      end
      @verification_method = verification_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payout_type Object to be assigned
    def payout_type=(payout_type)
      validator = EnumAttributeValidator.new('String', ["BANK_ACCOUNT", "BALANCE", "PREPAID_CARD"])
      unless validator.valid?(payout_type)
        fail ArgumentError, "invalid value for \"payout_type\", must be one of #{validator.allowable_values}."
      end
      @payout_type = payout_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] simple_status Object to be assigned
    def simple_status=(simple_status)
      validator = EnumAttributeValidator.new('String', ["SUCCESSFUL", "PAID_OUT", "CANCEL_FAILED", "CANCELLED", "CHARGEBACK", "FAILED", "REFUND_FAILED", "REFUNDED", "NON_COLLECTION"])
      unless validator.valid?(simple_status)
        fail ArgumentError, "invalid value for \"simple_status\", must be one of #{validator.allowable_values}."
      end
      @simple_status = simple_status
    end

    # Custom attribute writer method with validation
    # @param [Object] links Value to be assigned
    def links=(links)
      if links.nil?
        fail ArgumentError, 'links cannot be nil'
      end

      @links = links
    end

    # Custom attribute writer method with validation
    # @param [Object] events Value to be assigned
    def events=(events)
      if events.nil?
        fail ArgumentError, 'events cannot be nil'
      end

      @events = events
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          transaction_code == o.transaction_code &&
          amount == o.amount &&
          currency == o.currency &&
          timestamp == o.timestamp &&
          status == o.status &&
          payment_type == o.payment_type &&
          installments_count == o.installments_count &&
          merchant_code == o.merchant_code &&
          vat_amount == o.vat_amount &&
          tip_amount == o.tip_amount &&
          entry_mode == o.entry_mode &&
          auth_code == o.auth_code &&
          internal_id == o.internal_id &&
          product_summary == o.product_summary &&
          payouts_total == o.payouts_total &&
          payouts_received == o.payouts_received &&
          payout_plan == o.payout_plan &&
          username == o.username &&
          lat == o.lat &&
          lon == o.lon &&
          horizontal_accuracy == o.horizontal_accuracy &&
          simple_payment_type == o.simple_payment_type &&
          verification_method == o.verification_method &&
          card == o.card &&
          local_time == o.local_time &&
          payout_type == o.payout_type &&
          products == o.products &&
          vat_rates == o.vat_rates &&
          transaction_events == o.transaction_events &&
          simple_status == o.simple_status &&
          links == o.links &&
          events == o.events &&
          location == o.location &&
          tax_enabled == o.tax_enabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, transaction_code, amount, currency, timestamp, status, payment_type, installments_count, merchant_code, vat_amount, tip_amount, entry_mode, auth_code, internal_id, product_summary, payouts_total, payouts_received, payout_plan, username, lat, lon, horizontal_accuracy, simple_payment_type, verification_method, card, local_time, payout_type, products, vat_rates, transaction_events, simple_status, links, events, location, tax_enabled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
