=begin
#SumUp REST API

#SumUpâ€™s REST API operates with [JSON](https://www.json.org/json-en.html) HTTP requests and responses. The request bodies are sent through resource-oriented URLs and use the standard [HTTP response codes](https://developer.mozilla.org/docs/Web/HTTP/Status).  You can experiment and work on your integration in a sandbox that doesn't affect your regular data and doesn't process real transactions. To create a sandbox merchant account visit the [dashboard](https://me.sumup.com/settings/developer). To use the sandbox when interacting with SumUp APIs [create an API](https://me.sumup.com/settings/api-keys) key and use it for [authentication](https://developer.sumup.com/api/authentication). 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Account's merchant profile
  class MerchantProfilePayload
    # Id of the legal type of the merchant
    attr_accessor :legal_type_id

    # Merchant category code
    attr_accessor :merchant_category_code

    # Company name
    attr_accessor :company_name

    # Company registration number
    attr_accessor :company_registration_number

    # Vat ID
    attr_accessor :vat_id

    # Payment certificate access code
    attr_accessor :permanent_certificate_access_code

    # Company website
    attr_accessor :website

    # Nature and purpose of the business. Required for the following merchant category codes: 5999, 7392, 8999, 5694, 5969, 7299, 7399
    attr_accessor :nature_and_purpose

    # Mobile number
    attr_accessor :mobile_phone

    attr_accessor :address

    attr_accessor :doing_business_as

    # Business owners information.
    attr_accessor :business_owners

    # Defines if the profile nature is for testing
    attr_accessor :is_test_account

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'legal_type_id' => :'legal_type_id',
        :'merchant_category_code' => :'merchant_category_code',
        :'company_name' => :'company_name',
        :'company_registration_number' => :'company_registration_number',
        :'vat_id' => :'vat_id',
        :'permanent_certificate_access_code' => :'permanent_certificate_access_code',
        :'website' => :'website',
        :'nature_and_purpose' => :'nature_and_purpose',
        :'mobile_phone' => :'mobile_phone',
        :'address' => :'address',
        :'doing_business_as' => :'doing_business_as',
        :'business_owners' => :'business_owners',
        :'is_test_account' => :'is_test_account'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'legal_type_id' => :'Float',
        :'merchant_category_code' => :'String',
        :'company_name' => :'String',
        :'company_registration_number' => :'String',
        :'vat_id' => :'String',
        :'permanent_certificate_access_code' => :'String',
        :'website' => :'String',
        :'nature_and_purpose' => :'String',
        :'mobile_phone' => :'String',
        :'address' => :'AddressPayload',
        :'doing_business_as' => :'MerchantProfilePayloadDoingBusinessAs',
        :'business_owners' => :'Array<BusinessOwnersInner>',
        :'is_test_account' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::MerchantProfilePayload` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::MerchantProfilePayload`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'legal_type_id')
        self.legal_type_id = attributes[:'legal_type_id']
      else
        self.legal_type_id = nil
      end

      if attributes.key?(:'merchant_category_code')
        self.merchant_category_code = attributes[:'merchant_category_code']
      else
        self.merchant_category_code = nil
      end

      if attributes.key?(:'company_name')
        self.company_name = attributes[:'company_name']
      else
        self.company_name = nil
      end

      if attributes.key?(:'company_registration_number')
        self.company_registration_number = attributes[:'company_registration_number']
      else
        self.company_registration_number = nil
      end

      if attributes.key?(:'vat_id')
        self.vat_id = attributes[:'vat_id']
      end

      if attributes.key?(:'permanent_certificate_access_code')
        self.permanent_certificate_access_code = attributes[:'permanent_certificate_access_code']
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end

      if attributes.key?(:'nature_and_purpose')
        self.nature_and_purpose = attributes[:'nature_and_purpose']
      end

      if attributes.key?(:'mobile_phone')
        self.mobile_phone = attributes[:'mobile_phone']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      else
        self.address = nil
      end

      if attributes.key?(:'doing_business_as')
        self.doing_business_as = attributes[:'doing_business_as']
      end

      if attributes.key?(:'business_owners')
        if (value = attributes[:'business_owners']).is_a?(Array)
          self.business_owners = value
        end
      end

      if attributes.key?(:'is_test_account')
        self.is_test_account = attributes[:'is_test_account']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @legal_type_id.nil?
        invalid_properties.push('invalid value for "legal_type_id", legal_type_id cannot be nil.')
      end

      if @merchant_category_code.nil?
        invalid_properties.push('invalid value for "merchant_category_code", merchant_category_code cannot be nil.')
      end

      if @company_name.nil?
        invalid_properties.push('invalid value for "company_name", company_name cannot be nil.')
      end

      if @company_registration_number.nil?
        invalid_properties.push('invalid value for "company_registration_number", company_registration_number cannot be nil.')
      end

      if @address.nil?
        invalid_properties.push('invalid value for "address", address cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @legal_type_id.nil?
      return false if @merchant_category_code.nil?
      return false if @company_name.nil?
      return false if @company_registration_number.nil?
      return false if @address.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          legal_type_id == o.legal_type_id &&
          merchant_category_code == o.merchant_category_code &&
          company_name == o.company_name &&
          company_registration_number == o.company_registration_number &&
          vat_id == o.vat_id &&
          permanent_certificate_access_code == o.permanent_certificate_access_code &&
          website == o.website &&
          nature_and_purpose == o.nature_and_purpose &&
          mobile_phone == o.mobile_phone &&
          address == o.address &&
          doing_business_as == o.doing_business_as &&
          business_owners == o.business_owners &&
          is_test_account == o.is_test_account
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [legal_type_id, merchant_category_code, company_name, company_registration_number, vat_id, permanent_certificate_access_code, website, nature_and_purpose, mobile_phone, address, doing_business_as, business_owners, is_test_account].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
