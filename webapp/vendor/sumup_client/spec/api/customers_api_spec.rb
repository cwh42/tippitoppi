=begin
#SumUp REST API

#SumUpâ€™s REST API operates with [JSON](https://www.json.org/json-en.html) HTTP requests and responses. The request bodies are sent through resource-oriented URLs and use the standard [HTTP response codes](https://developer.mozilla.org/docs/Web/HTTP/Status).  You can experiment and work on your integration in a sandbox that doesn't affect your regular data and doesn't process real transactions. To create a sandbox merchant account visit the [dashboard](https://me.sumup.com/settings/developer). To use the sandbox when interacting with SumUp APIs [create an API](https://me.sumup.com/settings/api-keys) key and use it for [authentication](https://developer.sumup.com/api/authentication). 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::CustomersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CustomersApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::CustomersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CustomersApi' do
    it 'should create an instance of CustomersApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::CustomersApi)
    end
  end

  # unit tests for create_customer
  # Create a customer
  # Creates a new saved customer resource which you can later manipulate and save payment instruments to.
  # @param [Hash] opts the optional parameters
  # @option opts [Customer] :customer Details of the customer.
  # @return [Customer]
  describe 'create_customer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for deactivate_payment_instrument
  # Deactivate a payment instrument
  # Deactivates an identified card payment instrument resource for a customer.
  # @param customer_id Unique ID of the saved customer resource.
  # @param token Unique token identifying the card saved as a payment instrument resource.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'deactivate_payment_instrument test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_customer
  # Retrieve a customer
  # Retrieves an identified saved customer resource through the unique &#x60;customer_id&#x60; parameter, generated upon customer creation.
  # @param customer_id Unique ID of the saved customer resource.
  # @param [Hash] opts the optional parameters
  # @return [Customer]
  describe 'get_customer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_payment_instruments
  # List payment instruments
  # Lists all payment instrument resources that are saved for an identified customer.
  # @param customer_id Unique ID of the saved customer resource.
  # @param [Hash] opts the optional parameters
  # @return [Array<PaymentInstrumentResponse>]
  describe 'list_payment_instruments test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_customer
  # Update a customer
  # Updates an identified saved customer resource&#39;s personal details.  The request only overwrites the parameters included in the request, all other parameters will remain with their initially assigned values. 
  # @param customer_id Unique ID of the saved customer resource.
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateCustomerRequest] :update_customer_request 
  # @return [Customer]
  describe 'update_customer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
